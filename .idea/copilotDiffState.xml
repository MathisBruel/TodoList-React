<?xml version="1.0" encoding="UTF-8"?>
<project version="4">
  <component name="CopilotDiffPersistence">
    <option name="pendingDiffs">
      <map>
        <entry key="$PROJECT_DIR$/src/App/EditTask.tsx">
          <value>
            <PendingDiffInfo>
              <option name="filePath" value="$PROJECT_DIR$/src/App/EditTask.tsx" />
              <option name="originalContent" value="import {isDescriptionValid, isTitleValid, isValid, Task} from &quot;../Domain/Task&quot;;&#10;import {StateType} from &quot;../Domain/StateType&quot;;&#10;import {DOMupdateTask} from &quot;../Domain/Tasks&quot;;&#10;&#10;export function editTitle(task: Task, newTitle: string): Task | undefined {&#10;    if(!isTitleValid(newTitle) &amp;&amp; newTitle !== task.title) return undefined;&#10;    task.title = newTitle;&#10;    task.updatedAt = new Date();&#10;    DOMupdateTask(task);&#10;    return task;&#10;}&#10;&#10;export function editDescription(task: Task, newDescription?: string): Task | undefined{&#10;    if(!isDescriptionValid(newDescription)) return undefined;&#10;    task.description = newDescription;&#10;    task.updatedAt = new Date();&#10;    DOMupdateTask(task);&#10;    return task;&#10;}&#10;&#10;export function editDeadlineDate(task: Task, newDeadlineDate?: Date): Task | undefined {&#10;    if(!newDeadlineDate) return undefined;&#10;    task.deadlineDate = newDeadlineDate;&#10;    task.updatedAt = new Date();&#10;    DOMupdateTask(task);&#10;    return task;&#10;}&#10;&#10;export function editStatus(task: Task, newStatus: StateType): Task | undefined {&#10;    if(!isValid(task.title, task.description, task.deadlineDate)) return undefined;&#10;    task.state = newStatus;&#10;    task.updatedAt = new Date();&#10;    DOMupdateTask(task);&#10;    return task;&#10;}&#10;&#10;" />
              <option name="updatedContent" value="import {isDescriptionValid, isTitleValid, isValid, Task} from &quot;../Domain/Task&quot;;&#10;import {StateType} from &quot;../Domain/StateType&quot;;&#10;import {DOMupdateTask} from &quot;../Domain/Tasks&quot;;&#10;&#10;export function editTitle(task: Task, newTitle: string): Task | undefined {&#10;    if (!isTitleValid(newTitle)) return undefined;&#10;    task.title = newTitle;&#10;    task.updatedAt = new Date();&#10;    DOMupdateTask(task);&#10;    return task;&#10;}&#10;&#10;export function editDescription(task: Task, newDescription?: string): Task | undefined{&#10;    if(!isDescriptionValid(newDescription)) return undefined;&#10;    task.description = newDescription;&#10;    task.updatedAt = new Date();&#10;    DOMupdateTask(task);&#10;    return task;&#10;}&#10;&#10;export function editDeadlineDate(task: Task, newDeadlineDate?: Date): Task | undefined {&#10;    // Permettre de définir ou supprimer la date (undefined est accepté)&#10;    task.deadlineDate = newDeadlineDate;&#10;    task.updatedAt = new Date();&#10;    DOMupdateTask(task);&#10;    return task;&#10;}&#10;&#10;export function editStatus(task: Task, newStatus: StateType): Task | undefined {&#10;    if(!isValid(task.title, task.description, task.deadlineDate)) return undefined;&#10;    task.state = newStatus;&#10;    task.updatedAt = new Date();&#10;    DOMupdateTask(task);&#10;    return task;&#10;}" />
            </PendingDiffInfo>
          </value>
        </entry>
        <entry key="$PROJECT_DIR$/src/Domain/Task.tsx">
          <value>
            <PendingDiffInfo>
              <option name="filePath" value="$PROJECT_DIR$/src/Domain/Task.tsx" />
              <option name="originalContent" value="import {getTask} from &quot;./Tasks&quot;;&#10;import {StateType} from &quot;./StateType&quot;;&#10;&#10;export interface Task {&#10;    uuid: string;&#10;    title: string;&#10;    state: StateType;&#10;    description?: string;&#10;    deadlineDate?: Date;&#10;    createdAt: Date;&#10;    updatedAt: Date;&#10;}&#10;&#10;&#10;export function isValid(title: string, description?: string, deadlineDate?: Date): boolean {&#10;    if (!isTitleValid(title)) return false;&#10;    if (!isDescriptionValid(description)) return false;&#10;    if (!isDeadlineValid(deadlineDate)) return false;&#10;    return !getTask(title);&#10;}&#10;&#10;export function isTitleValid(title: string): boolean {&#10;    return title.trim().length &gt;= 3;&#10;}&#10;&#10;export function isDescriptionValid(description?: string): boolean {&#10;    if (!description) return true;&#10;    return description.trim().length &gt;= 3;&#10;}&#10;&#10;export function isDeadlineValid(deadlineDate?: Date): boolean {&#10;    if (!deadlineDate) return true;&#10;    return deadlineDate &gt; new Date();&#10;}&#10;&#10;export function DOMcreateTask(title: string, description?: string, deadlineDate?: Date): Task {&#10;&#10;    return {&#10;        uuid: crypto.randomUUID(),&#10;        title,&#10;        description,&#10;        state: StateType.TODO,&#10;        createdAt: new Date(),&#10;        updatedAt: new Date(),&#10;        deadlineDate&#10;    };&#10;}" />
              <option name="updatedContent" value="import {getTask} from &quot;./Tasks&quot;;&#10;import {StateType} from &quot;./StateType&quot;;&#10;&#10;export interface Task {&#10;    uuid: string;&#10;    title: string;&#10;    state: StateType;&#10;    description?: string;&#10;    deadlineDate?: Date;&#10;    createdAt: Date;&#10;    updatedAt: Date;&#10;}&#10;&#10;&#10;export function isValid(title: string, description?: string, deadlineDate?: Date): boolean {&#10;    if (!isTitleValid(title)) return false;&#10;    if (!isDescriptionValid(description)) return false;&#10;    if (!isDeadlineValid(deadlineDate)) return false;&#10;    return !getTask(title);&#10;}&#10;&#10;export function isTitleValid(title: string): boolean {&#10;    return title.trim().length &gt;= 3;&#10;}&#10;&#10;export function isDescriptionValid(description?: string): boolean {&#10;    if (!description || description.trim().length === 0) return true; // Accepter undefined, null, ou chaîne vide&#10;    return description.trim().length &gt;= 3; // Si présente, doit faire au moins 3 caractères&#10;}&#10;&#10;export function isDeadlineValid(deadlineDate?: Date): boolean {&#10;    if (!deadlineDate) return true;&#10;    return deadlineDate &gt; new Date();&#10;}&#10;&#10;export function DOMcreateTask(title: string, description?: string, deadlineDate?: Date): Task {&#10;&#10;    return {&#10;        uuid: crypto.randomUUID(),&#10;        title,&#10;        description,&#10;        state: StateType.TODO,&#10;        createdAt: new Date(),&#10;        updatedAt: new Date(),&#10;        deadlineDate&#10;    };&#10;}&#10;&#10;export function getValidationError(title: string, description?: string, deadlineDate?: Date): string | null {&#10;    if (!isTitleValid(title)) {&#10;        return `Le titre doit contenir au moins 3 caractères (actuellement: ${title.trim().length})`;&#10;    }&#10;    if (!isDescriptionValid(description)) {&#10;        return `La description doit contenir au moins 3 caractères (actuellement: ${description?.trim().length || 0})`;&#10;    }&#10;    if (!isDeadlineValid(deadlineDate)) {&#10;        return `La date limite doit être dans le futur (actuellement: ${deadlineDate?.toLocaleDateString('fr-FR') || 'non définie'})`;&#10;    }&#10;    if (getTask(title)) {&#10;        return `Une tâche avec le titre &quot;${title}&quot; existe déjà`;&#10;    }&#10;    return null; // Aucune erreur&#10;}" />
            </PendingDiffInfo>
          </value>
        </entry>
        <entry key="$PROJECT_DIR$/src/Web/components/CreationForms.tsx">
          <value>
            <PendingDiffInfo>
              <option name="filePath" value="$PROJECT_DIR$/src/Web/components/CreationForms.tsx" />
              <option name="originalContent" value="import React from 'react';&#10;&#10;export function CreationForms({onCreate}: {&#10;    onCreate: (title: string, description?: string, deadlineDate?: Date) =&gt; void&#10;}) {&#10;    function handleSubmit(e: React.FormEvent&lt;HTMLFormElement&gt;) {&#10;        e.preventDefault();&#10;        const form = e.currentTarget;&#10;        const title = (form.elements.namedItem('title') as HTMLInputElement)?.value;&#10;        const descriptionRaw = (form.elements.namedItem('description') as HTMLTextAreaElement)?.value;&#10;        const descriptionToSend = descriptionRaw === &quot;&quot; ? undefined : descriptionRaw;&#10;        const deadlineRaw = (form.elements.namedItem('deadline') as HTMLInputElement)?.valueAsDate;&#10;        const deadlineToSend = deadlineRaw === null ? undefined : deadlineRaw;&#10;        onCreate(title, descriptionToSend, deadlineToSend);&#10;    }&#10;&#10;    return (&#10;        &lt;div className=&quot;creation-forms&quot;&gt;&#10;            &lt;h2 style={{marginBottom: '18px'}}&gt;Créez une nouvelle Todo&lt;/h2&gt;&#10;            &lt;form className=&quot;create-form&quot; onSubmit={handleSubmit}&gt;&#10;                &lt;input type=&quot;text&quot; id=&quot;title&quot; name=&quot;title&quot; required placeholder=&quot;Titre&quot;/&gt;&#10;                &lt;textarea id=&quot;description&quot; name=&quot;description&quot; placeholder=&quot;Description&quot;/&gt;&#10;                &lt;input type=&quot;date&quot; id=&quot;deadline&quot; name=&quot;deadline&quot; placeholder=&quot;Date limite&quot; min={new Date().toISOString().split('T')[0]} defaultValue={new Date().toISOString().split('T')[0]}/&gt;&#10;            &lt;button type=&quot;submit&quot;&gt;Créer la tâche&lt;/button&gt;&#10;            &lt;/form&gt;&#10;        &lt;/div&gt;&#10;    )&#10;}&#10;" />
              <option name="updatedContent" value="import React, {useState} from 'react';&#10;import {isTitleValid, isDescriptionValid, isDeadlineValid} from &quot;../../Domain/Task&quot;;&#10;&#10;export function CreationForms({onCreate}: {&#10;    onCreate: (title: string, description?: string, deadlineDate?: Date) =&gt; void&#10;}) {&#10;    const [errors, setErrors] = useState&lt;{&#10;        title?: string;&#10;        description?: string;&#10;        deadline?: string;&#10;    }&gt;({});&#10;&#10;    function handleSubmit(e: React.FormEvent&lt;HTMLFormElement&gt;) {&#10;        e.preventDefault();&#10;        const form = e.currentTarget;&#10;        const title = (form.elements.namedItem('title') as HTMLInputElement)?.value;&#10;        const descriptionRaw = (form.elements.namedItem('description') as HTMLTextAreaElement)?.value;&#10;        const descriptionToSend = descriptionRaw === &quot;&quot; ? undefined : descriptionRaw;&#10;        const deadlineRaw = (form.elements.namedItem('deadline') as HTMLInputElement)?.valueAsDate;&#10;        const deadlineToSend = deadlineRaw === null ? undefined : deadlineRaw;&#10;&#10;        // Validation des champs&#10;        const newErrors: typeof errors = {};&#10;&#10;        if (!isTitleValid(title)) {&#10;            newErrors.title = `Le titre doit contenir au moins 3 caractères (actuellement: ${title.trim().length})`;&#10;        }&#10;&#10;        if (!isDescriptionValid(descriptionToSend)) {&#10;            newErrors.description = `La description doit contenir au moins 3 caractères (actuellement: ${descriptionRaw?.trim().length || 0})`;&#10;        }&#10;&#10;        if (!isDeadlineValid(deadlineToSend)) {&#10;            newErrors.deadline = `La date limite doit être dans le futur (actuellement: ${deadlineToSend?.toLocaleDateString('fr-FR') || 'non définie'})`;&#10;        }&#10;&#10;        setErrors(newErrors);&#10;&#10;        // Si pas d'erreurs, créer la tâche&#10;        if (Object.keys(newErrors).length === 0) {&#10;            onCreate(title, descriptionToSend, deadlineToSend);&#10;            // Réinitialiser le formulaire&#10;            form.reset();&#10;            form.querySelector&lt;HTMLInputElement&gt;('input[name=&quot;deadline&quot;]')!.value = new Date().toISOString().split('T')[0];&#10;        }&#10;    }&#10;&#10;    return (&#10;        &lt;div className=&quot;creation-forms&quot;&gt;&#10;            &lt;h2 style={{marginBottom: '18px'}}&gt;Créez une nouvelle Todo&lt;/h2&gt;&#10;            &lt;form className=&quot;create-form&quot; onSubmit={handleSubmit}&gt;&#10;                &lt;div className=&quot;form-field&quot;&gt;&#10;                    &lt;input &#10;                        type=&quot;text&quot; &#10;                        id=&quot;title&quot; &#10;                        name=&quot;title&quot; &#10;                        required &#10;                        placeholder=&quot;Titre&quot;&#10;                        style={{&#10;                            borderColor: errors.title ? '#dc3545' : undefined,&#10;                            borderWidth: errors.title ? '2px' : undefined&#10;                        }}&#10;                    /&gt;&#10;                    {errors.title &amp;&amp; (&#10;                        &lt;div style={{&#10;                            color: '#dc3545',&#10;                            fontSize: '12px',&#10;                            marginTop: '4px'&#10;                        }}&gt;&#10;                            {errors.title}&#10;                        &lt;/div&gt;&#10;                    )}&#10;                &lt;/div&gt;&#10;&#10;                &lt;div className=&quot;form-field&quot;&gt;&#10;                    &lt;textarea &#10;                        id=&quot;description&quot; &#10;                        name=&quot;description&quot; &#10;                        placeholder=&quot;Description&quot;&#10;                        style={{&#10;                            borderColor: errors.description ? '#dc3545' : undefined,&#10;                            borderWidth: errors.description ? '2px' : undefined&#10;                        }}&#10;                    /&gt;&#10;                    {errors.description &amp;&amp; (&#10;                        &lt;div style={{&#10;                            color: '#dc3545',&#10;                            fontSize: '12px',&#10;                            marginTop: '4px'&#10;                        }}&gt;&#10;                            {errors.description}&#10;                        &lt;/div&gt;&#10;                    )}&#10;                &lt;/div&gt;&#10;&#10;                &lt;div className=&quot;form-field&quot;&gt;&#10;                    &lt;input &#10;                        type=&quot;date&quot; &#10;                        id=&quot;deadline&quot; &#10;                        name=&quot;deadline&quot; &#10;                        placeholder=&quot;Date limite&quot; &#10;                        min={new Date().toISOString().split('T')[0]} &#10;                        defaultValue={new Date().toISOString().split('T')[0]}&#10;                        style={{&#10;                            borderColor: errors.deadline ? '#dc3545' : undefined,&#10;                            borderWidth: errors.deadline ? '2px' : undefined&#10;                        }}&#10;                    /&gt;&#10;                    {errors.deadline &amp;&amp; (&#10;                        &lt;div style={{&#10;                            color: '#dc3545',&#10;                            fontSize: '12px',&#10;                            marginTop: '4px'&#10;                        }}&gt;&#10;                            {errors.deadline}&#10;                        &lt;/div&gt;&#10;                    )}&#10;                &lt;/div&gt;&#10;&#10;                &lt;button type=&quot;submit&quot;&gt;Créer la tâche&lt;/button&gt;&#10;            &lt;/form&gt;&#10;        &lt;/div&gt;&#10;    )&#10;}" />
            </PendingDiffInfo>
          </value>
        </entry>
        <entry key="$PROJECT_DIR$/src/Web/components/TaskComponent.tsx">
          <value>
            <PendingDiffInfo>
              <option name="filePath" value="$PROJECT_DIR$/src/Web/components/TaskComponent.tsx" />
              <option name="originalContent" value="import {Task} from &quot;../../Domain/Task&quot;;&#10;import {StateType, StateConfig} from &quot;../../Domain/StateType&quot;;&#10;import React, {useState} from &quot;react&quot;;&#10;import {editDeadlineDate, editDescription, editTitle, editStatus} from &quot;../../App/EditTask&quot;;&#10;import {getTask} from &quot;../../Domain/Tasks&quot;;&#10;&#10;export function TaskComponent({task, onDelete, onUpdate}: {&#10;    task: Task,&#10;    onDelete: (title: string) =&gt; void,&#10;    onUpdate: () =&gt; void&#10;}) {&#10;    const [localState, setLocalState] = useState&lt;StateType&gt;(task.state);&#10;    const [editField, setEditField] = useState&lt;null | 'title' | 'description' | 'deadline'&gt;(null);&#10;    const [editValue, setEditValue] = useState&lt;string&gt;(&quot;&quot;);&#10;    const [showStatusDropdown, setShowStatusDropdown] = useState(false);&#10;&#10;    function handleClickDelete(e: React.MouseEvent&lt;HTMLButtonElement&gt;) {&#10;        e.preventDefault();&#10;        onDelete(task.title);&#10;    }&#10;&#10;    function handleEdit(field: 'title' | 'description' | 'deadline') {&#10;        setEditField(field);&#10;        if (field === 'deadline') {&#10;            setEditValue(task.deadlineDate ? task.deadlineDate.toISOString().slice(0, 10) : &quot;&quot;);&#10;        } else {&#10;            setEditValue((task as any)[field] ?? &quot;&quot;);&#10;        }&#10;    }&#10;&#10;    function handleSave(title: string, field: 'title' | 'description' | 'deadline') {&#10;        // À compléter par la logique métier&#10;        const editedTask: Task | undefined = getTask(title)&#10;        if (!editedTask) {&#10;            alert('Erreur de sauvegarde : impossible de trouver la tâche à modifier');&#10;            return;&#10;        }&#10;        &#10;        let result: Task | undefined;&#10;        if (field === 'title') {&#10;            result = editTitle(editedTask, editValue);&#10;        } else if (field === 'description') {&#10;            result = editDescription(editedTask, editValue);&#10;        } else if (field === 'deadline') {&#10;            result = editDeadlineDate(editedTask, editValue ? new Date(editValue) : undefined);&#10;        }&#10;&#10;        if (!result) {&#10;            alert('Erreur de sauvegarde : les données saisies ne sont pas valides');&#10;            return;&#10;        }&#10;&#10;        // Réinitialiser l'état d'édition&#10;        setEditField(null);&#10;        setEditValue(&quot;&quot;);&#10;&#10;        // Actualiser le tableau&#10;        onUpdate();&#10;    }&#10;&#10;    function handleStatusChange(newStatus: StateType) {&#10;        const editedTask = getTask(task.title);&#10;        if (!editedTask) {&#10;            alert('Erreur de sauvegarde : impossible de trouver la tâche à modifier');&#10;            return;&#10;        }&#10;        &#10;        const result = editStatus(editedTask, newStatus);&#10;        if (!result) {&#10;            alert('Erreur de sauvegarde : impossible de changer le statut, vérifiez que la tâche est valide');&#10;            return;&#10;        }&#10;        &#10;        onUpdate();&#10;        setLocalState(newStatus);&#10;        setShowStatusDropdown(false);&#10;    }&#10;&#10;    const currentStatusConfig = StateConfig[localState];&#10;&#10;    return (&#10;        &lt;tr className=&quot;task-row&quot; key={task.uuid}&gt;&#10;            {/* Titre */}&#10;            &lt;td&gt;&#10;                {editField === 'title' ? (&#10;                    &lt;div style={{display: 'flex', alignItems: 'center', gap: '8px'}}&gt;&#10;                        &lt;input&#10;                            type=&quot;text&quot;&#10;                            value={editValue}&#10;                            onChange={e =&gt; setEditValue(e.target.value)}&#10;                            className=&quot;edit-input&quot;&#10;                            style={{width: '100%'}}&#10;                        /&gt;&#10;                        &lt;button className=&quot;icon-btn&quot; onClick={() =&gt; handleSave(task.title, 'title')}&#10;                                title=&quot;Sauvegarder&quot;&gt;&#10;                            &lt;span style={{fontSize: '1em'}}&gt;✔️&lt;/span&gt;&#10;                        &lt;/button&gt;&#10;                    &lt;/div&gt;&#10;                ) : (&#10;                    &lt;div style={{display: 'flex', alignItems: 'center', gap: '8px'}}&gt;&#10;                        &lt;span style={{flex: 1}}&gt;{task.title}&lt;/span&gt;&#10;                        &lt;button className=&quot;icon-btn&quot; onClick={() =&gt; handleEdit('title')} title=&quot;Modifier le titre&quot;&gt;&#10;                            &lt;span style={{fontSize: '1em', opacity: 0.7}}&gt;✏️&lt;/span&gt;&#10;                        &lt;/button&gt;&#10;                    &lt;/div&gt;&#10;                )}&#10;            &lt;/td&gt;&#10;            {/* Description */}&#10;            &lt;td&gt;&#10;                {editField === 'description' ? (&#10;                    &lt;div style={{display: 'flex', alignItems: 'center', gap: '8px'}}&gt;&#10;                        &lt;textarea&#10;                            value={editValue}&#10;                            onChange={e =&gt; setEditValue(e.target.value)}&#10;                            className=&quot;edit-input&quot;&#10;                            style={{resize: 'vertical', minHeight: '24px', width: '100%'}}&#10;                        /&gt;&#10;                        &lt;button className=&quot;icon-btn&quot; onClick={() =&gt; handleSave(task.title, 'description')}&#10;                                title=&quot;Sauvegarder&quot;&gt;&#10;                            &lt;span style={{fontSize: '1em'}}&gt;✔️&lt;/span&gt;&#10;                        &lt;/button&gt;&#10;                    &lt;/div&gt;&#10;                ) : (&#10;                    &lt;div style={{display: 'flex', alignItems: 'center', gap: '8px'}}&gt;&#10;                        &lt;span style={{flex: 1}}&gt;{task.description}&lt;/span&gt;&#10;                        &lt;button className=&quot;icon-btn&quot; onClick={() =&gt; handleEdit('description')}&#10;                                title=&quot;Modifier la description&quot;&gt;&#10;                            &lt;span style={{fontSize: '1em', opacity: 0.7}}&gt;✏️&lt;/span&gt;&#10;                        &lt;/button&gt;&#10;                    &lt;/div&gt;&#10;                )}&#10;            &lt;/td&gt;&#10;            {/* Deadline */}&#10;            &lt;td&gt;&#10;                {editField === 'deadline' ? (&#10;                    &lt;div style={{display: 'flex', alignItems: 'center', gap: '8px'}}&gt;&#10;                        &lt;input&#10;                            type=&quot;date&quot;&#10;                            value={editValue}&#10;                            onChange={e =&gt; setEditValue(e.target.value)}&#10;                            className=&quot;edit-input&quot;&#10;                            style={{width: '120px'}}&#10;                            min={new Date().toISOString().slice(0, 10)}&#10;                        /&gt;&#10;                        &lt;button className=&quot;icon-btn&quot; onClick={() =&gt; handleSave(task.title, 'deadline')}&#10;                                title=&quot;Sauvegarder&quot;&gt;&#10;                            &lt;span style={{fontSize: '1em'}}&gt;✔️&lt;/span&gt;&#10;                        &lt;/button&gt;&#10;                    &lt;/div&gt;&#10;                ) : (&#10;                    &lt;div style={{display: 'flex', alignItems: 'center', gap: '8px'}}&gt;&#10;                        &lt;span style={{flex: 1}}&gt;{task.deadlineDate ? task.deadlineDate.toLocaleDateString('fr-FR', {&#10;                            day: 'numeric',&#10;                            month: 'long',&#10;                            year: 'numeric'&#10;                        }) : &quot;—&quot;}&lt;/span&gt;&#10;                        &lt;button className=&quot;icon-btn&quot; onClick={() =&gt; handleEdit('deadline')}&#10;                                title=&quot;Modifier la date limite&quot;&gt;&#10;                            &lt;span style={{fontSize: '1em', opacity: 0.7}}&gt;✏️&lt;/span&gt;&#10;                        &lt;/button&gt;&#10;                    &lt;/div&gt;&#10;                )}&#10;            &lt;/td&gt;&#10;            {/* Statut visuel avec badge coloré */}&#10;            &lt;td&gt;&#10;                &lt;div className=&quot;status-dropdown&quot;&gt;&#10;                    &lt;button&#10;                        className={`status-badge ${currentStatusConfig.class}`}&#10;                        onClick={() =&gt; setShowStatusDropdown(!showStatusDropdown)}&#10;                        onBlur={() =&gt; setTimeout(() =&gt; setShowStatusDropdown(false), 200)}&#10;                        title=&quot;Changer le statut&quot;&#10;                    &gt;&#10;                        &lt;span&gt;{currentStatusConfig.icon}&lt;/span&gt;&#10;                        &lt;span&gt;{currentStatusConfig.label}&lt;/span&gt;&#10;                        &lt;span style={{fontSize: '0.7em', opacity: 0.6}}&gt;▼&lt;/span&gt;&#10;                    &lt;/button&gt;&#10;                    {showStatusDropdown &amp;&amp; (&#10;                        &lt;div className=&quot;status-options&quot;&gt;&#10;                            {Object.values(StateType).map(status =&gt; {&#10;                                const config = StateConfig[status];&#10;                                return (&#10;                                    &lt;button&#10;                                        key={status}&#10;                                        className=&quot;status-option&quot;&#10;                                        onClick={() =&gt; handleStatusChange(status)}&#10;                                    &gt;&#10;                                        &lt;span&gt;{config.icon}&lt;/span&gt;&#10;                                        &lt;span&gt;{config.label}&lt;/span&gt;&#10;                                    &lt;/button&gt;&#10;                                );&#10;                            })}&#10;                        &lt;/div&gt;&#10;                    )}&#10;                &lt;/div&gt;&#10;            &lt;/td&gt;&#10;            {/* Actions minimalistes */}&#10;            &lt;td style={{textAlign: 'center', width: '32px'}}&gt;&#10;                &lt;button className=&quot;icon-btn delete&quot; onClick={handleClickDelete} title=&quot;Supprimer&quot;&gt;&#10;                    &lt;span style={{fontSize: '1em', opacity: 0.8}}&gt;️&lt;/span&gt;&#10;                &lt;/button&gt;&#10;            &lt;/td&gt;&#10;        &lt;/tr&gt;&#10;    );&#10;}" />
              <option name="updatedContent" value="import {Task} from &quot;../../Domain/Task&quot;;&#10;import {StateType, StateConfig} from &quot;../../Domain/StateType&quot;;&#10;import React, {useState} from &quot;react&quot;;&#10;import {editDeadlineDate, editDescription, editTitle, editStatus} from &quot;../../App/EditTask&quot;;&#10;import {getTask} from &quot;../../Domain/Tasks&quot;;&#10;import {isTitleValid, isDescriptionValid} from &quot;../../Domain/Task&quot;;&#10;&#10;export function TaskComponent({task, onDelete, onUpdate}: {&#10;    task: Task,&#10;    onDelete: (title: string) =&gt; void,&#10;    onUpdate: () =&gt; void&#10;}) {&#10;    const [localState, setLocalState] = useState&lt;StateType&gt;(task.state);&#10;    const [editField, setEditField] = useState&lt;null | 'title' | 'description' | 'deadline'&gt;(null);&#10;    const [editValue, setEditValue] = useState&lt;string&gt;(&quot;&quot;);&#10;    const [showStatusDropdown, setShowStatusDropdown] = useState(false);&#10;&#10;    function handleClickDelete(e: React.MouseEvent&lt;HTMLButtonElement&gt;) {&#10;        e.preventDefault();&#10;        onDelete(task.title);&#10;    }&#10;&#10;    function handleEdit(field: 'title' | 'description' | 'deadline') {&#10;        setEditField(field);&#10;        if (field === 'deadline') {&#10;            setEditValue(task.deadlineDate ? task.deadlineDate.toISOString().slice(0, 10) : &quot;&quot;);&#10;        } else {&#10;            setEditValue((task as any)[field] ?? &quot;&quot;);&#10;        }&#10;    }&#10;&#10;    function handleSave(title: string, field: 'title' | 'description' | 'deadline') {&#10;        // À compléter par la logique métier&#10;        const editedTask: Task | undefined = getTask(title)&#10;        if (!editedTask) {&#10;            alert('Erreur de sauvegarde : impossible de trouver la tâche à modifier');&#10;            return;&#10;        }&#10;        &#10;        let result: Task | undefined;&#10;        let errorMessage = '';&#10;        &#10;        if (field === 'title') {&#10;            if (!isTitleValid(editValue)) {&#10;                errorMessage = `Le titre doit contenir au moins 3 caractères (actuellement: ${editValue.trim().length})`;&#10;            } else {&#10;                result = editTitle(editedTask, editValue);&#10;            }&#10;        } else if (field === 'description') {&#10;            if (!isDescriptionValid(editValue)) {&#10;                errorMessage = `La description doit contenir au moins 3 caractères (actuellement: ${editValue?.trim().length || 0})`;&#10;            } else {&#10;                result = editDescription(editedTask, editValue);&#10;            }&#10;        } else if (field === 'deadline') {&#10;            result = editDeadlineDate(editedTask, editValue ? new Date(editValue) : undefined);&#10;        }&#10;&#10;        if (errorMessage) {&#10;            alert(`Erreur de sauvegarde : ${errorMessage}`);&#10;            return;&#10;        }&#10;&#10;        if (!result) {&#10;            alert('Erreur de sauvegarde : une erreur inattendue s\'est produite');&#10;            return;&#10;        }&#10;&#10;        // Réinitialiser l'état d'édition&#10;        setEditField(null);&#10;        setEditValue(&quot;&quot;);&#10;&#10;        // Actualiser le tableau&#10;        onUpdate();&#10;    }&#10;&#10;    function handleStatusChange(newStatus: StateType) {&#10;        const editedTask = getTask(task.title);&#10;        if (!editedTask) {&#10;            alert('Erreur de sauvegarde : impossible de trouver la tâche à modifier');&#10;            return;&#10;        }&#10;        &#10;        const result = editStatus(editedTask, newStatus);&#10;        if (!result) {&#10;            alert('Erreur de sauvegarde : impossible de changer le statut, vérifiez que la tâche est valide');&#10;            return;&#10;        }&#10;        &#10;        onUpdate();&#10;        setLocalState(newStatus);&#10;        setShowStatusDropdown(false);&#10;    }&#10;&#10;    const currentStatusConfig = StateConfig[localState];&#10;&#10;    return (&#10;        &lt;tr className=&quot;task-row&quot; key={task.uuid}&gt;&#10;            {/* Titre */}&#10;            &lt;td&gt;&#10;                {editField === 'title' ? (&#10;                    &lt;div style={{display: 'flex', alignItems: 'center', gap: '8px'}}&gt;&#10;                        &lt;input&#10;                            type=&quot;text&quot;&#10;                            value={editValue}&#10;                            onChange={e =&gt; setEditValue(e.target.value)}&#10;                            className=&quot;edit-input&quot;&#10;                            style={{width: '100%'}}&#10;                        /&gt;&#10;                        &lt;button className=&quot;icon-btn&quot; onClick={() =&gt; handleSave(task.title, 'title')}&#10;                                title=&quot;Sauvegarder&quot;&gt;&#10;                            &lt;span style={{fontSize: '1em'}}&gt;✔️&lt;/span&gt;&#10;                        &lt;/button&gt;&#10;                    &lt;/div&gt;&#10;                ) : (&#10;                    &lt;div style={{display: 'flex', alignItems: 'center', gap: '8px'}}&gt;&#10;                        &lt;span style={{flex: 1}}&gt;{task.title}&lt;/span&gt;&#10;                        &lt;button className=&quot;icon-btn&quot; onClick={() =&gt; handleEdit('title')} title=&quot;Modifier le titre&quot;&gt;&#10;                            &lt;span style={{fontSize: '1em', opacity: 0.7}}&gt;✏️&lt;/span&gt;&#10;                        &lt;/button&gt;&#10;                    &lt;/div&gt;&#10;                )}&#10;            &lt;/td&gt;&#10;            {/* Description */}&#10;            &lt;td&gt;&#10;                {editField === 'description' ? (&#10;                    &lt;div style={{display: 'flex', alignItems: 'center', gap: '8px'}}&gt;&#10;                        &lt;textarea&#10;                            value={editValue}&#10;                            onChange={e =&gt; setEditValue(e.target.value)}&#10;                            className=&quot;edit-input&quot;&#10;                            style={{resize: 'vertical', minHeight: '24px', width: '100%'}}&#10;                        /&gt;&#10;                        &lt;button className=&quot;icon-btn&quot; onClick={() =&gt; handleSave(task.title, 'description')}&#10;                                title=&quot;Sauvegarder&quot;&gt;&#10;                            &lt;span style={{fontSize: '1em'}}&gt;✔️&lt;/span&gt;&#10;                        &lt;/button&gt;&#10;                    &lt;/div&gt;&#10;                ) : (&#10;                    &lt;div style={{display: 'flex', alignItems: 'center', gap: '8px'}}&gt;&#10;                        &lt;span style={{flex: 1}}&gt;{task.description}&lt;/span&gt;&#10;                        &lt;button className=&quot;icon-btn&quot; onClick={() =&gt; handleEdit('description')}&#10;                                title=&quot;Modifier la description&quot;&gt;&#10;                            &lt;span style={{fontSize: '1em', opacity: 0.7}}&gt;✏️&lt;/span&gt;&#10;                        &lt;/button&gt;&#10;                    &lt;/div&gt;&#10;                )}&#10;            &lt;/td&gt;&#10;            {/* Deadline */}&#10;            &lt;td&gt;&#10;                {editField === 'deadline' ? (&#10;                    &lt;div style={{display: 'flex', alignItems: 'center', gap: '8px'}}&gt;&#10;                        &lt;input&#10;                            type=&quot;date&quot;&#10;                            value={editValue}&#10;                            onChange={e =&gt; setEditValue(e.target.value)}&#10;                            className=&quot;edit-input&quot;&#10;                            style={{width: '120px'}}&#10;                            min={new Date().toISOString().slice(0, 10)}&#10;                        /&gt;&#10;                        &lt;button className=&quot;icon-btn&quot; onClick={() =&gt; handleSave(task.title, 'deadline')}&#10;                                title=&quot;Sauvegarder&quot;&gt;&#10;                            &lt;span style={{fontSize: '1em'}}&gt;✔️&lt;/span&gt;&#10;                        &lt;/button&gt;&#10;                    &lt;/div&gt;&#10;                ) : (&#10;                    &lt;div style={{display: 'flex', alignItems: 'center', gap: '8px'}}&gt;&#10;                        &lt;span style={{flex: 1}}&gt;{task.deadlineDate ? task.deadlineDate.toLocaleDateString('fr-FR', {&#10;                            day: 'numeric',&#10;                            month: 'long',&#10;                            year: 'numeric'&#10;                        }) : &quot;—&quot;}&lt;/span&gt;&#10;                        &lt;button className=&quot;icon-btn&quot; onClick={() =&gt; handleEdit('deadline')}&#10;                                title=&quot;Modifier la date limite&quot;&gt;&#10;                            &lt;span style={{fontSize: '1em', opacity: 0.7}}&gt;✏️&lt;/span&gt;&#10;                        &lt;/button&gt;&#10;                    &lt;/div&gt;&#10;                )}&#10;            &lt;/td&gt;&#10;            {/* Statut visuel avec badge coloré */}&#10;            &lt;td&gt;&#10;                &lt;div className=&quot;status-dropdown&quot;&gt;&#10;                    &lt;button&#10;                        className={`status-badge ${currentStatusConfig.class}`}&#10;                        onClick={() =&gt; setShowStatusDropdown(!showStatusDropdown)}&#10;                        onBlur={() =&gt; setTimeout(() =&gt; setShowStatusDropdown(false), 200)}&#10;                        title=&quot;Changer le statut&quot;&#10;                    &gt;&#10;                        &lt;span&gt;{currentStatusConfig.icon}&lt;/span&gt;&#10;                        &lt;span&gt;{currentStatusConfig.label}&lt;/span&gt;&#10;                        &lt;span style={{fontSize: '0.7em', opacity: 0.6}}&gt;▼&lt;/span&gt;&#10;                    &lt;/button&gt;&#10;                    {showStatusDropdown &amp;&amp; (&#10;                        &lt;div className=&quot;status-options&quot;&gt;&#10;                            {Object.values(StateType).map(status =&gt; {&#10;                                const config = StateConfig[status];&#10;                                return (&#10;                                    &lt;button&#10;                                        key={status}&#10;                                        className=&quot;status-option&quot;&#10;                                        onClick={() =&gt; handleStatusChange(status)}&#10;                                    &gt;&#10;                                        &lt;span&gt;{config.icon}&lt;/span&gt;&#10;                                        &lt;span&gt;{config.label}&lt;/span&gt;&#10;                                    &lt;/button&gt;&#10;                                );&#10;                            })}&#10;                        &lt;/div&gt;&#10;                    )}&#10;                &lt;/div&gt;&#10;            &lt;/td&gt;&#10;            {/* Actions minimalistes */}&#10;            &lt;td style={{textAlign: 'center', width: '32px'}}&gt;&#10;                &lt;button className=&quot;icon-btn delete&quot; onClick={handleClickDelete} title=&quot;Supprimer&quot;&gt;&#10;                    &lt;span style={{fontSize: '1em', opacity: 0.8}}&gt;️&lt;/span&gt;&#10;                &lt;/button&gt;&#10;            &lt;/td&gt;&#10;        &lt;/tr&gt;&#10;    );&#10;}" />
            </PendingDiffInfo>
          </value>
        </entry>
        <entry key="$PROJECT_DIR$/src/Web/index.css">
          <value>
            <PendingDiffInfo>
              <option name="filePath" value="$PROJECT_DIR$/src/Web/index.css" />
              <option name="originalContent" value="body {&#10;  font-family: 'Inter', 'Roboto', system-ui, sans-serif;&#10;  background: #f6f8fa;&#10;  color: #222;&#10;  margin: 0;&#10;  padding: 0;&#10;  line-height: 1.6;&#10;}&#10;&#10;h1, h2 {&#10;  font-weight: 600;&#10;  margin-bottom: 0.5em;&#10;  color: #1a1a1a;&#10;}&#10;&#10;/* Conteneur du formulaire de création */&#10;.creation-forms {&#10;  background: #fff;&#10;  border-radius: 12px;&#10;  box-shadow: 0 2px 8px rgba(0,0,0,0.04);&#10;  padding: 24px;&#10;  margin-bottom: 24px;&#10;}&#10;&#10;.table-container {&#10;  background: #fff;&#10;  border-radius: 12px;&#10;  box-shadow: 0 2px 8px rgba(0,0,0,0.04);&#10;  padding: 24px;&#10;  margin-top: 32px;&#10;}&#10;&#10;table {&#10;  width: 100%;&#10;  border-collapse: collapse;&#10;  background: transparent;&#10;}&#10;th, td {&#10;  padding: 12px 8px;&#10;  border-bottom: 1px solid #ececec;&#10;  font-size: 0.98rem;&#10;}&#10;th {&#10;  font-weight: 500;&#10;  color: #555;&#10;  background: #f6f8fa;&#10;}&#10;.task-row {&#10;  background: #fff;&#10;  transition: box-shadow 0.2s, background 0.2s;&#10;}&#10;.task-row:hover {&#10;  background: #f0f4fa;&#10;  box-shadow: 0 1px 4px rgba(0,0,0,0.03);&#10;}&#10;.icon-btn {&#10;  background: none;&#10;  border: none;&#10;  padding: 6px;&#10;  border-radius: 6px;&#10;  cursor: pointer;&#10;  transition: background 0.18s;&#10;  display: inline-flex;&#10;  align-items: center;&#10;  justify-content: center;&#10;  min-width: 28px;&#10;  min-height: 28px;&#10;}&#10;.icon-btn:hover {&#10;  background: #e3eafc;&#10;}&#10;.icon-btn.delete {&#10;  color: #e53935;&#10;}&#10;.icon-btn.delete:hover {&#10;  background: #ffeaea;&#10;}&#10;.edit-input {&#10;  border: 1px solid #d0d7de;&#10;  border-radius: 8px;&#10;  padding: 8px 12px;&#10;  font-size: 0.97rem;&#10;  background: #fff;&#10;  transition: border 0.18s, box-shadow 0.18s;&#10;  font-family: inherit;&#10;}&#10;.edit-input:focus {&#10;  border-color: #1976d2;&#10;  outline: none;&#10;  box-shadow: 0 0 0 3px rgba(25, 118, 210, 0.1);&#10;}&#10;input[type=&quot;date&quot;]::-webkit-calendar-picker-indicator {&#10;  filter: grayscale(1);&#10;  cursor: pointer;&#10;}&#10;select.edit-input {&#10;  background: #fff;&#10;  border-radius: 8px;&#10;  border: 1px solid #d0d7de;&#10;  padding: 8px 12px;&#10;  font-size: 0.97rem;&#10;  cursor: pointer;&#10;}&#10;/* Formulaire de création moderne */&#10;.create-form {&#10;  display: flex;&#10;  gap: 12px;&#10;  align-items: stretch;&#10;  margin-top: 16px;&#10;  flex-wrap: wrap;&#10;}&#10;.create-form input,&#10;.create-form textarea {&#10;  flex: 1;&#10;  min-width: 140px;&#10;  font-size: 0.97rem;&#10;  border-radius: 8px;&#10;  border: 1px solid #d0d7de;&#10;  padding: 10px 14px;&#10;  background: #fff;&#10;  font-family: inherit;&#10;  transition: border 0.18s, box-shadow 0.18s;&#10;}&#10;.create-form input:focus,&#10;.create-form textarea:focus {&#10;  border-color: #1976d2;&#10;  outline: none;&#10;  box-shadow: 0 0 0 3px rgba(25, 118, 210, 0.1);&#10;}&#10;.create-form textarea {&#10;  resize: vertical;&#10;  min-height: 42px;&#10;  max-height: 100px;&#10;}&#10;.create-form input[type=&quot;date&quot;] {&#10;  flex: 0 0 160px;&#10;}&#10;.create-form button {&#10;  background: linear-gradient(135deg, #1976d2, #1565c0);&#10;  color: #fff;&#10;  border: none;&#10;  border-radius: 8px;&#10;  padding: 10px 20px;&#10;  font-size: 0.97rem;&#10;  font-weight: 500;&#10;  cursor: pointer;&#10;  transition: all 0.18s;&#10;  flex-shrink: 0;&#10;  font-family: inherit;&#10;}&#10;.create-form button:hover {&#10;  background: linear-gradient(135deg, #1565c0, #0d47a1);&#10;  box-shadow: 0 2px 8px rgba(25, 118, 210, 0.25);&#10;  transform: translateY(-1px);&#10;}&#10;.create-form button:active {&#10;  transform: translateY(0);&#10;}&#10;&#10;/* Badges de statut visuels */&#10;.status-badge {&#10;  display: inline-flex;&#10;  align-items: center;&#10;  gap: 6px;&#10;  padding: 6px 12px;&#10;  border-radius: 20px;&#10;  font-size: 0.85rem;&#10;  font-weight: 500;&#10;  border: none;&#10;  cursor: pointer;&#10;  transition: all 0.2s;&#10;  min-width: 100px;&#10;  justify-content: center;&#10;}&#10;&#10;.status-badge.todo {&#10;  background: #f0f4f8;&#10;  color: #4a5568;&#10;  border: 1px solid #cbd5e0;&#10;}&#10;&#10;.status-badge.todo:hover {&#10;  background: #e2e8f0;&#10;  border-color: #a0aec0;&#10;}&#10;&#10;.status-badge.in-progress {&#10;  background: #fef5e7;&#10;  color: #d69e2e;&#10;  border: 1px solid #f6e05e;&#10;}&#10;&#10;.status-badge.in-progress:hover {&#10;  background: #fed7aa;&#10;  border-color: #ed8936;&#10;}&#10;&#10;.status-badge.done {&#10;  background: #f0fff4;&#10;  color: #38a169;&#10;  border: 1px solid #9ae6b4;&#10;}&#10;&#10;.status-badge.done:hover {&#10;  background: #c6f6d5;&#10;  border-color: #68d391;&#10;}&#10;&#10;.status-badge.archived {&#10;  background: #f7fafc;&#10;  color: #718096;&#10;  border: 1px solid #cbd5e0;&#10;}&#10;&#10;.status-badge.archived:hover {&#10;  background: #edf2f7;&#10;  border-color: #a0aec0;&#10;}&#10;&#10;.status-dropdown {&#10;  position: relative;&#10;  display: inline-block;&#10;}&#10;&#10;.status-options {&#10;  position: absolute;&#10;  top: 100%;&#10;  left: 0;&#10;  right: 0;&#10;  background: white;&#10;  border: 1px solid #e2e8f0;&#10;  border-radius: 8px;&#10;  box-shadow: 0 4px 12px rgba(0,0,0,0.1);&#10;  z-index: 100;&#10;  margin-top: 4px;&#10;  overflow: hidden;&#10;}&#10;&#10;.status-option {&#10;  display: flex;&#10;  align-items: center;&#10;  gap: 8px;&#10;  padding: 10px 12px;&#10;  cursor: pointer;&#10;  transition: background 0.15s;&#10;  border: none;&#10;  width: 100%;&#10;  text-align: left;&#10;  font-size: 0.9rem;&#10;}&#10;&#10;.status-option:hover {&#10;  background: #f7fafc;&#10;}&#10;&#10;/* Responsive design */&#10;@media (max-width: 768px) {&#10;  .create-form {&#10;    flex-direction: column;&#10;    gap: 8px;&#10;  }&#10;  .create-form input,&#10;  .create-form textarea,&#10;  .create-form button {&#10;    width: 100%;&#10;  }&#10;}&#10;" />
              <option name="updatedContent" value="body {&#10;  font-family: 'Inter', 'Roboto', system-ui, sans-serif;&#10;  background: #f6f8fa;&#10;  color: #222;&#10;  margin: 0;&#10;  padding: 0;&#10;  line-height: 1.6;&#10;}&#10;&#10;h1, h2 {&#10;  font-weight: 600;&#10;  margin-bottom: 0.5em;&#10;  color: #1a1a1a;&#10;}&#10;&#10;/* Conteneur du formulaire de création */&#10;.creation-forms {&#10;  background: #fff;&#10;  border-radius: 12px;&#10;  box-shadow: 0 2px 8px rgba(0,0,0,0.04);&#10;  padding: 24px;&#10;  margin-bottom: 24px;&#10;}&#10;&#10;.table-container {&#10;  background: #fff;&#10;  border-radius: 12px;&#10;  box-shadow: 0 2px 8px rgba(0,0,0,0.04);&#10;  padding: 24px;&#10;  margin-top: 32px;&#10;}&#10;&#10;table {&#10;  width: 100%;&#10;  border-collapse: collapse;&#10;  background: transparent;&#10;}&#10;th, td {&#10;  padding: 12px 8px;&#10;  border-bottom: 1px solid #ececec;&#10;  font-size: 0.98rem;&#10;}&#10;th {&#10;  font-weight: 500;&#10;  color: #555;&#10;  background: #f6f8fa;&#10;}&#10;.task-row {&#10;  background: #fff;&#10;  transition: box-shadow 0.2s, background 0.2s;&#10;}&#10;.task-row:hover {&#10;  background: #f0f4fa;&#10;  box-shadow: 0 1px 4px rgba(0,0,0,0.03);&#10;}&#10;.icon-btn {&#10;  background: none;&#10;  border: none;&#10;  padding: 6px;&#10;  border-radius: 6px;&#10;  cursor: pointer;&#10;  transition: background 0.18s;&#10;  display: inline-flex;&#10;  align-items: center;&#10;  justify-content: center;&#10;  min-width: 28px;&#10;  min-height: 28px;&#10;}&#10;.icon-btn:hover {&#10;  background: #e3eafc;&#10;}&#10;.icon-btn.delete {&#10;  color: #e53935;&#10;}&#10;.icon-btn.delete:hover {&#10;  background: #ffeaea;&#10;}&#10;.edit-input {&#10;  border: 1px solid #d0d7de;&#10;  border-radius: 8px;&#10;  padding: 8px 12px;&#10;  font-size: 0.97rem;&#10;  background: #fff;&#10;  transition: border 0.18s, box-shadow 0.18s;&#10;  font-family: inherit;&#10;}&#10;.edit-input:focus {&#10;  border-color: #1976d2;&#10;  outline: none;&#10;  box-shadow: 0 0 0 3px rgba(25, 118, 210, 0.1);&#10;}&#10;input[type=&quot;date&quot;]::-webkit-calendar-picker-indicator {&#10;  filter: grayscale(1);&#10;  cursor: pointer;&#10;}&#10;select.edit-input {&#10;  background: #fff;&#10;  border-radius: 8px;&#10;  border: 1px solid #d0d7de;&#10;  padding: 8px 12px;&#10;  font-size: 0.97rem;&#10;  cursor: pointer;&#10;}&#10;/* Formulaire de création moderne */&#10;.create-form {&#10;  display: flex;&#10;  gap: 16px;&#10;  align-items: flex-start;&#10;  margin-top: 20px;&#10;  flex-wrap: wrap;&#10;}&#10;&#10;.form-field {&#10;  flex: 1;&#10;  min-width: 140px;&#10;  margin-bottom: 8px;&#10;}&#10;&#10;.form-field input,&#10;.form-field textarea {&#10;  width: 100%;&#10;  font-size: 0.97rem;&#10;  border-radius: 8px;&#10;  border: 1px solid #d0d7de;&#10;  padding: 12px 14px;&#10;  background: #fff;&#10;  font-family: inherit;&#10;  transition: border 0.18s, box-shadow 0.18s;&#10;  box-sizing: border-box;&#10;}&#10;&#10;.form-field input:focus,&#10;.form-field textarea:focus {&#10;  border-color: #1976d2;&#10;  outline: none;&#10;  box-shadow: 0 0 0 3px rgba(25, 118, 210, 0.1);&#10;}&#10;&#10;.form-field textarea {&#10;  resize: vertical;&#10;  min-height: 46px;&#10;  max-height: 100px;&#10;}&#10;&#10;.form-field input[type=&quot;date&quot;] {&#10;  min-width: 160px;&#10;}&#10;&#10;.create-form button {&#10;  background: linear-gradient(135deg, #1976d2, #1565c0);&#10;  color: #fff;&#10;  border: none;&#10;  border-radius: 8px;&#10;  padding: 12px 24px;&#10;  font-size: 0.97rem;&#10;  font-weight: 500;&#10;  cursor: pointer;&#10;  transition: all 0.18s;&#10;  flex-shrink: 0;&#10;  font-family: inherit;&#10;  margin-top: 0;&#10;  height: 46px;&#10;  align-self: flex-start;&#10;}&#10;&#10;/* Badges de statut visuels */&#10;.status-badge {&#10;  display: inline-flex;&#10;  align-items: center;&#10;  gap: 6px;&#10;  padding: 6px 12px;&#10;  border-radius: 20px;&#10;  font-size: 0.85rem;&#10;  font-weight: 500;&#10;  border: none;&#10;  cursor: pointer;&#10;  transition: all 0.2s;&#10;  min-width: 100px;&#10;  justify-content: center;&#10;}&#10;&#10;.status-badge.todo {&#10;  background: #f0f4f8;&#10;  color: #4a5568;&#10;  border: 1px solid #cbd5e0;&#10;}&#10;&#10;.status-badge.todo:hover {&#10;  background: #e2e8f0;&#10;  border-color: #a0aec0;&#10;}&#10;&#10;.status-badge.in-progress {&#10;  background: #fef5e7;&#10;  color: #d69e2e;&#10;  border: 1px solid #f6e05e;&#10;}&#10;&#10;.status-badge.in-progress:hover {&#10;  background: #fed7aa;&#10;  border-color: #ed8936;&#10;}&#10;&#10;.status-badge.done {&#10;  background: #f0fff4;&#10;  color: #38a169;&#10;  border: 1px solid #9ae6b4;&#10;}&#10;&#10;.status-badge.done:hover {&#10;  background: #c6f6d5;&#10;  border-color: #68d391;&#10;}&#10;&#10;.status-badge.archived {&#10;  background: #f7fafc;&#10;  color: #718096;&#10;  border: 1px solid #cbd5e0;&#10;}&#10;&#10;.status-badge.archived:hover {&#10;  background: #edf2f7;&#10;  border-color: #a0aec0;&#10;}&#10;&#10;.status-dropdown {&#10;  position: relative;&#10;  display: inline-block;&#10;}&#10;&#10;.status-options {&#10;  position: absolute;&#10;  top: 100%;&#10;  left: 0;&#10;  right: 0;&#10;  background: white;&#10;  border: 1px solid #e2e8f0;&#10;  border-radius: 8px;&#10;  box-shadow: 0 4px 12px rgba(0,0,0,0.1);&#10;  z-index: 100;&#10;  margin-top: 4px;&#10;  overflow: hidden;&#10;}&#10;&#10;.status-option {&#10;  display: flex;&#10;  align-items: center;&#10;  gap: 8px;&#10;  padding: 10px 12px;&#10;  cursor: pointer;&#10;  transition: background 0.15s;&#10;  border: none;&#10;  width: 100%;&#10;  text-align: left;&#10;  font-size: 0.9rem;&#10;}&#10;&#10;.status-option:hover {&#10;  background: #f7fafc;&#10;}&#10;&#10;/* Responsive design */&#10;@media (max-width: 768px) {&#10;  .create-form {&#10;    flex-direction: column;&#10;    gap: 8px;&#10;  }&#10;  .create-form input,&#10;  .create-form textarea,&#10;  .create-form button {&#10;    width: 100%;&#10;  }&#10;}" />
            </PendingDiffInfo>
          </value>
        </entry>
      </map>
    </option>
  </component>
</project>