<?xml version="1.0" encoding="UTF-8"?>
<project version="4">
  <component name="CopilotDiffPersistence">
    <option name="pendingDiffs">
      <map>
        <entry key="$PROJECT_DIR$/src/Web/App.tsx">
          <value>
            <PendingDiffInfo>
              <option name="filePath" value="$PROJECT_DIR$/src/Web/App.tsx" />
              <option name="originalContent" value="import React, {useState} from &quot;react&quot;;&#10;import {CreationForms} from &quot;./components/CreationForms&quot;;&#10;import {ShowTodos} from &quot;./components/ShowTodos&quot;;&#10;import {getTasks} from &quot;../Domain/Tasks&quot;;&#10;import {createTask} from &quot;../App/CreateTask&quot;;&#10;import {removeTask} from &quot;../App/RemoveTask&quot;;&#10;&#10;function App() {&#10;    const [tasks, setTasks] = useState(getTasks());&#10;&#10;    // Rafraîchit la liste des tâches depuis le domaine&#10;    const refreshTasks = () =&gt; {&#10;        setTasks(getTasks());&#10;    };&#10;&#10;    // Callback métier pour la création&#10;    const handleCreate = (title: string, description?: string, deadlineDate?: Date) =&gt; {&#10;        createTask(title, description, deadlineDate);&#10;        refreshTasks();&#10;    };&#10;&#10;    // Callback métier pour la suppression&#10;    const handleDelete = (title: string) =&gt; {&#10;        removeTask(title);&#10;        refreshTasks();&#10;    };&#10;&#10;    return (&#10;        &lt;&gt;&#10;            &lt;CreationForms onCreate={handleCreate} /&gt;&#10;            &lt;ShowTodos tasks={tasks} onDelete={handleDelete} /&gt;&#10;        &lt;/&gt;&#10;    )&#10;}&#10;&#10;export default App;" />
              <option name="updatedContent" value="import React, {useState} from &quot;react&quot;;&#10;import {CreationForms} from &quot;./components/CreationForms&quot;;&#10;import {ShowTodos} from &quot;./components/ShowTodos&quot;;&#10;import {getTasks} from &quot;../Domain/Tasks&quot;;&#10;import {createTask} from &quot;../App/CreateTask&quot;;&#10;import {removeTask} from &quot;../App/RemoveTask&quot;;&#10;&#10;function App() {&#10;    const [tasks, setTasks] = useState(getTasks());&#10;&#10;    // Rafraîchit la liste des tâches depuis le domaine&#10;    const refreshTasks = () =&gt; {&#10;        setTasks(getTasks());&#10;    };&#10;&#10;    // Callback métier pour la création&#10;    const handleCreate = (title: string, description?: string, deadlineDate?: Date) =&gt; {&#10;        createTask(title, description, deadlineDate);&#10;        refreshTasks();&#10;    };&#10;&#10;    // Callback métier pour la suppression&#10;    const handleDelete = (title: string) =&gt; {&#10;        removeTask(title);&#10;        refreshTasks();&#10;    };&#10;&#10;    return (&#10;        &lt;div style={{ maxWidth: '1200px', margin: '0 auto', padding: '32px 24px' }}&gt;&#10;            &lt;CreationForms onCreate={handleCreate} /&gt;&#10;            &lt;ShowTodos tasks={tasks} onDelete={handleDelete} /&gt;&#10;        &lt;/div&gt;&#10;    )&#10;}&#10;&#10;export default App;" />
            </PendingDiffInfo>
          </value>
        </entry>
        <entry key="$PROJECT_DIR$/src/Web/components/CreationForms.tsx">
          <value>
            <PendingDiffInfo>
              <option name="filePath" value="$PROJECT_DIR$/src/Web/components/CreationForms.tsx" />
              <option name="originalContent" value="import React from 'react';&#10;import {Task} from &quot;../../Domain/Task&quot;;&#10;&#10;export function CreationForms({onCreate}: {onCreate: (title: string, description?: string, deadlineDate?: Date) =&gt; void}) {&#10;    function handleSubmit(e: React.FormEvent&lt;HTMLFormElement&gt;) {&#10;        e.preventDefault();&#10;        const form = e.currentTarget;&#10;        const title = (form.elements.namedItem('title') as HTMLInputElement)?.value;&#10;        const descriptionRaw = (form.elements.namedItem('description') as HTMLTextAreaElement)?.value;&#10;        const descriptionToSend = descriptionRaw === &quot;&quot; ? undefined : descriptionRaw;&#10;        const deadlineRaw = (form.elements.namedItem('deadline') as HTMLInputElement)?.valueAsDate;&#10;        const deadlineToSend = deadlineRaw === null ? undefined : deadlineRaw;&#10;        onCreate(title, descriptionToSend, deadlineToSend);&#10;    }&#10;&#10;    return (&#10;        &lt;div className=&quot;creation-forms&quot;&gt;&#10;            &lt;h2 style={{marginBottom: '18px'}}&gt;Créez une nouvelle Todo&lt;/h2&gt;&#10;            &lt;form className=&quot;create-form&quot; onSubmit={handleSubmit}&gt;&#10;                &lt;input type=&quot;text&quot; id=&quot;title&quot; name=&quot;title&quot; required placeholder=&quot;Titre&quot; /&gt;&#10;                &lt;textarea id=&quot;description&quot; name=&quot;description&quot; placeholder=&quot;Description&quot; /&gt;&#10;                &lt;input type=&quot;date&quot; id=&quot;deadline&quot; name=&quot;deadline&quot; placeholder=&quot;Date limite&quot; /&gt;&#10;                &lt;button type=&quot;submit&quot;&gt;Créer la tâche&lt;/button&gt;&#10;            &lt;/form&gt;&#10;        &lt;/div&gt;&#10;    )&#10;}&#10;" />
              <option name="updatedContent" value="import React from 'react';&#10;&#10;export function CreationForms({onCreate}: {onCreate: (title: string, description?: string, deadlineDate?: Date) =&gt; void}) {&#10;    function handleSubmit(e: React.FormEvent&lt;HTMLFormElement&gt;) {&#10;        e.preventDefault();&#10;        const form = e.currentTarget;&#10;        const title = (form.elements.namedItem('title') as HTMLInputElement)?.value;&#10;        const descriptionRaw = (form.elements.namedItem('description') as HTMLTextAreaElement)?.value;&#10;        const descriptionToSend = descriptionRaw === &quot;&quot; ? undefined : descriptionRaw;&#10;        const deadlineRaw = (form.elements.namedItem('deadline') as HTMLInputElement)?.valueAsDate;&#10;        const deadlineToSend = deadlineRaw === null ? undefined : deadlineRaw;&#10;        onCreate(title, descriptionToSend, deadlineToSend);&#10;    }&#10;&#10;    return (&#10;        &lt;div className=&quot;creation-forms&quot;&gt;&#10;            &lt;h2 style={{marginBottom: '18px'}}&gt;Créez une nouvelle Todo&lt;/h2&gt;&#10;            &lt;form className=&quot;create-form&quot; onSubmit={handleSubmit}&gt;&#10;                &lt;input type=&quot;text&quot; id=&quot;title&quot; name=&quot;title&quot; required placeholder=&quot;Titre&quot; /&gt;&#10;                &lt;textarea id=&quot;description&quot; name=&quot;description&quot; placeholder=&quot;Description&quot; /&gt;&#10;                &lt;input type=&quot;date&quot; id=&quot;deadline&quot; name=&quot;deadline&quot; placeholder=&quot;Date limite&quot; /&gt;&#10;                &lt;button type=&quot;submit&quot;&gt;Créer la tâche&lt;/button&gt;&#10;            &lt;/form&gt;&#10;        &lt;/div&gt;&#10;    )&#10;}" />
            </PendingDiffInfo>
          </value>
        </entry>
        <entry key="$PROJECT_DIR$/src/Web/components/TaskComponent.tsx">
          <value>
            <PendingDiffInfo>
              <option name="filePath" value="$PROJECT_DIR$/src/Web/components/TaskComponent.tsx" />
              <option name="originalContent" value="import {Task} from &quot;../../Domain/Task&quot;;&#10;import {StateType} from &quot;../../Domain/StateType&quot;;&#10;import React, {useState} from &quot;react&quot;;&#10;&#10;export function TaskComponent({task, onDelete}: { task: Task, onDelete: (title: string) =&gt; void }) {&#10;    const [localState, setLocalState] = useState&lt;StateType&gt;(task.state);&#10;    const [editField, setEditField] = useState&lt;null | 'title' | 'description' | 'deadline'&gt;(null);&#10;    const [editValue, setEditValue] = useState&lt;string&gt;(&quot;&quot;);&#10;&#10;    function handleClickDelete(e: React.MouseEvent&lt;HTMLButtonElement&gt;) {&#10;        e.preventDefault();&#10;        onDelete(task.title);&#10;    }&#10;&#10;    function handleEdit(field: 'title' | 'description' | 'deadline') {&#10;        setEditField(field);&#10;        if (field === 'deadline') {&#10;            setEditValue(task.deadlineDate ? task.deadlineDate.toISOString().slice(0, 10) : &quot;&quot;);&#10;        } else {&#10;            setEditValue((task as any)[field] ?? &quot;&quot;);&#10;        }&#10;    }&#10;&#10;    function handleSave(field: 'title' | 'description' | 'deadline') {&#10;        // À compléter par la logique métier&#10;        setEditField(null);&#10;    }&#10;&#10;    return (&#10;        &lt;tr className=&quot;task-row&quot; key={task.uuid}&gt;&#10;            {/* Titre */}&#10;            &lt;td&gt;&#10;                {editField === 'title' ? (&#10;                    &lt;div style={{display: 'flex', alignItems: 'center', gap: '8px'}}&gt;&#10;                        &lt;input&#10;                            type=&quot;text&quot;&#10;                            value={editValue}&#10;                            onChange={e =&gt; setEditValue(e.target.value)}&#10;                            className=&quot;edit-input&quot;&#10;                            style={{width: '100%'}}&#10;                        /&gt;&#10;                        &lt;button className=&quot;icon-btn&quot; onClick={() =&gt; handleSave('title')} title=&quot;Sauvegarder&quot;&gt;&#10;                            &lt;span style={{fontSize: '1em'}}&gt;✔️&lt;/span&gt;&#10;                        &lt;/button&gt;&#10;                    &lt;/div&gt;&#10;                ) : (&#10;                    &lt;div style={{display: 'flex', alignItems: 'center', gap: '8px'}}&gt;&#10;                        &lt;span style={{flex: 1}}&gt;{task.title}&lt;/span&gt;&#10;                        &lt;button className=&quot;icon-btn&quot; onClick={() =&gt; handleEdit('title')} title=&quot;Modifier le titre&quot;&gt;&#10;                            &lt;span style={{fontSize: '1em', opacity: 0.7}}&gt;✏️&lt;/span&gt;&#10;                        &lt;/button&gt;&#10;                    &lt;/div&gt;&#10;                )}&#10;            &lt;/td&gt;&#10;            {/* Description */}&#10;            &lt;td&gt;&#10;                {editField === 'description' ? (&#10;                    &lt;div style={{display: 'flex', alignItems: 'center', gap: '8px'}}&gt;&#10;                        &lt;textarea&#10;                            value={editValue}&#10;                            onChange={e =&gt; setEditValue(e.target.value)}&#10;                            className=&quot;edit-input&quot;&#10;                            style={{resize: 'vertical', minHeight: '24px', width: '100%'}}&#10;                        /&gt;&#10;                        &lt;button className=&quot;icon-btn&quot; onClick={() =&gt; handleSave('description')} title=&quot;Sauvegarder&quot;&gt;&#10;                            &lt;span style={{fontSize: '1em'}}&gt;✔️&lt;/span&gt;&#10;                        &lt;/button&gt;&#10;                    &lt;/div&gt;&#10;                ) : (&#10;                    &lt;div style={{display: 'flex', alignItems: 'center', gap: '8px'}}&gt;&#10;                        &lt;span style={{flex: 1}}&gt;{task.description}&lt;/span&gt;&#10;                        &lt;button className=&quot;icon-btn&quot; onClick={() =&gt; handleEdit('description')} title=&quot;Modifier la description&quot;&gt;&#10;                            &lt;span style={{fontSize: '1em', opacity: 0.7}}&gt;✏️&lt;/span&gt;&#10;                        &lt;/button&gt;&#10;                    &lt;/div&gt;&#10;                )}&#10;            &lt;/td&gt;&#10;            {/* Deadline */}&#10;            &lt;td&gt;&#10;                {editField === 'deadline' ? (&#10;                    &lt;div style={{display: 'flex', alignItems: 'center', gap: '8px'}}&gt;&#10;                        &lt;input&#10;                            type=&quot;date&quot;&#10;                            value={editValue}&#10;                            onChange={e =&gt; setEditValue(e.target.value)}&#10;                            className=&quot;edit-input&quot;&#10;                            style={{width: '120px'}}&#10;                        /&gt;&#10;                        &lt;button className=&quot;icon-btn&quot; onClick={() =&gt; handleSave('deadline')} title=&quot;Sauvegarder&quot;&gt;&#10;                            &lt;span style={{fontSize: '1em'}}&gt;✔️&lt;/span&gt;&#10;                        &lt;/button&gt;&#10;                    &lt;/div&gt;&#10;                ) : (&#10;                    &lt;div style={{display: 'flex', alignItems: 'center', gap: '8px'}}&gt;&#10;                        &lt;span style={{flex: 1}}&gt;{task.deadlineDate ? task.deadlineDate. : &quot;—&quot;}&lt;/span&gt;&#10;                        &lt;button className=&quot;icon-btn&quot; onClick={() =&gt; handleEdit('deadline')} title=&quot;Modifier la date limite&quot;&gt;&#10;                            &lt;span style={{fontSize: '1em', opacity: 0.7}}&gt;✏️&lt;/span&gt;&#10;                        &lt;/button&gt;&#10;                    &lt;/div&gt;&#10;                )}&#10;            &lt;/td&gt;&#10;            {/* Statut */}&#10;            &lt;td&gt;&#10;                &lt;select&#10;                    className=&quot;edit-input&quot;&#10;                    value={localState}&#10;                    onChange={e =&gt; setLocalState(e.target.value as StateType)}&#10;                    style={{minWidth: '90px'}}&#10;                &gt;&#10;                    {Object.values(StateType).map(state =&gt; (&#10;                        &lt;option key={state} value={state}&gt;{state}&lt;/option&gt;&#10;                    ))}&#10;                &lt;/select&gt;&#10;            &lt;/td&gt;&#10;            {/* Actions minimalistes */}&#10;            &lt;td style={{textAlign: 'center', width: '32px'}}&gt;&#10;                &lt;button className=&quot;icon-btn delete&quot; onClick={handleClickDelete} title=&quot;Supprimer&quot;&gt;&#10;                    &lt;span style={{fontSize: '1em', opacity: 0.8}}&gt;️&lt;/span&gt;&#10;                &lt;/button&gt;&#10;            &lt;/td&gt;&#10;        &lt;/tr&gt;&#10;    );&#10;}&#10;" />
              <option name="updatedContent" value="import {Task} from &quot;../../Domain/Task&quot;;&#10;import {StateType} from &quot;../../Domain/StateType&quot;;&#10;import React, {useState} from &quot;react&quot;;&#10;&#10;export function TaskComponent({task, onDelete}: { task: Task, onDelete: (title: string) =&gt; void }) {&#10;    const [localState, setLocalState] = useState&lt;StateType&gt;(task.state);&#10;    const [editField, setEditField] = useState&lt;null | 'title' | 'description' | 'deadline'&gt;(null);&#10;    const [editValue, setEditValue] = useState&lt;string&gt;(&quot;&quot;);&#10;    const [showStatusDropdown, setShowStatusDropdown] = useState(false);&#10;&#10;    // Configuration des icônes et classes CSS pour chaque statut&#10;    const getStatusConfig = (status: StateType) =&gt; {&#10;        switch (status) {&#10;            case StateType.TODO:&#10;                return { icon: '⏳', class: 'todo', label: 'À faire' };&#10;            case StateType.IN_PROGRESS:&#10;                return { icon: '', class: 'in-progress', label: 'En cours' };&#10;            case StateType.DONE:&#10;                return { icon: '✅', class: 'done', label: 'Terminée' };&#10;            case StateType.ARCHIVED:&#10;                return { icon: '', class: 'archived', label: 'Archivée' };&#10;            default:&#10;                return { icon: '⏳', class: 'todo', label: 'À faire' };&#10;        }&#10;    };&#10;&#10;    function handleClickDelete(e: React.MouseEvent&lt;HTMLButtonElement&gt;) {&#10;        e.preventDefault();&#10;        onDelete(task.title);&#10;    }&#10;&#10;    function handleEdit(field: 'title' | 'description' | 'deadline') {&#10;        setEditField(field);&#10;        if (field === 'deadline') {&#10;            setEditValue(task.deadlineDate ? task.deadlineDate.toISOString().slice(0, 10) : &quot;&quot;);&#10;        } else {&#10;            setEditValue((task as any)[field] ?? &quot;&quot;);&#10;        }&#10;    }&#10;&#10;    function handleSave(field: 'title' | 'description' | 'deadline') {&#10;        // À compléter par la logique métier&#10;        setEditField(null);&#10;    }&#10;&#10;    function handleStatusChange(newStatus: StateType) {&#10;        setLocalState(newStatus);&#10;        setShowStatusDropdown(false);&#10;    }&#10;&#10;    const currentStatusConfig = getStatusConfig(localState);&#10;&#10;    return (&#10;        &lt;tr className=&quot;task-row&quot; key={task.uuid}&gt;&#10;            {/* Titre */}&#10;            &lt;td&gt;&#10;                {editField === 'title' ? (&#10;                    &lt;div style={{display: 'flex', alignItems: 'center', gap: '8px'}}&gt;&#10;                        &lt;input&#10;                            type=&quot;text&quot;&#10;                            value={editValue}&#10;                            onChange={e =&gt; setEditValue(e.target.value)}&#10;                            className=&quot;edit-input&quot;&#10;                            style={{width: '100%'}}&#10;                        /&gt;&#10;                        &lt;button className=&quot;icon-btn&quot; onClick={() =&gt; handleSave('title')} title=&quot;Sauvegarder&quot;&gt;&#10;                            &lt;span style={{fontSize: '1em'}}&gt;✔️&lt;/span&gt;&#10;                        &lt;/button&gt;&#10;                    &lt;/div&gt;&#10;                ) : (&#10;                    &lt;div style={{display: 'flex', alignItems: 'center', gap: '8px'}}&gt;&#10;                        &lt;span style={{flex: 1}}&gt;{task.title}&lt;/span&gt;&#10;                        &lt;button className=&quot;icon-btn&quot; onClick={() =&gt; handleEdit('title')} title=&quot;Modifier le titre&quot;&gt;&#10;                            &lt;span style={{fontSize: '1em', opacity: 0.7}}&gt;✏️&lt;/span&gt;&#10;                        &lt;/button&gt;&#10;                    &lt;/div&gt;&#10;                )}&#10;            &lt;/td&gt;&#10;            {/* Description */}&#10;            &lt;td&gt;&#10;                {editField === 'description' ? (&#10;                    &lt;div style={{display: 'flex', alignItems: 'center', gap: '8px'}}&gt;&#10;                        &lt;textarea&#10;                            value={editValue}&#10;                            onChange={e =&gt; setEditValue(e.target.value)}&#10;                            className=&quot;edit-input&quot;&#10;                            style={{resize: 'vertical', minHeight: '24px', width: '100%'}}&#10;                        /&gt;&#10;                        &lt;button className=&quot;icon-btn&quot; onClick={() =&gt; handleSave('description')} title=&quot;Sauvegarder&quot;&gt;&#10;                            &lt;span style={{fontSize: '1em'}}&gt;✔️&lt;/span&gt;&#10;                        &lt;/button&gt;&#10;                    &lt;/div&gt;&#10;                ) : (&#10;                    &lt;div style={{display: 'flex', alignItems: 'center', gap: '8px'}}&gt;&#10;                        &lt;span style={{flex: 1}}&gt;{task.description}&lt;/span&gt;&#10;                        &lt;button className=&quot;icon-btn&quot; onClick={() =&gt; handleEdit('description')} title=&quot;Modifier la description&quot;&gt;&#10;                            &lt;span style={{fontSize: '1em', opacity: 0.7}}&gt;✏️&lt;/span&gt;&#10;                        &lt;/button&gt;&#10;                    &lt;/div&gt;&#10;                )}&#10;            &lt;/td&gt;&#10;            {/* Deadline */}&#10;            &lt;td&gt;&#10;                {editField === 'deadline' ? (&#10;                    &lt;div style={{display: 'flex', alignItems: 'center', gap: '8px'}}&gt;&#10;                        &lt;input&#10;                            type=&quot;date&quot;&#10;                            value={editValue}&#10;                            onChange={e =&gt; setEditValue(e.target.value)}&#10;                            className=&quot;edit-input&quot;&#10;                            style={{width: '120px'}}&#10;                        /&gt;&#10;                        &lt;button className=&quot;icon-btn&quot; onClick={() =&gt; handleSave('deadline')} title=&quot;Sauvegarder&quot;&gt;&#10;                            &lt;span style={{fontSize: '1em'}}&gt;✔️&lt;/span&gt;&#10;                        &lt;/button&gt;&#10;                    &lt;/div&gt;&#10;                ) : (&#10;                    &lt;div style={{display: 'flex', alignItems: 'center', gap: '8px'}}&gt;&#10;                        &lt;span style={{flex: 1}}&gt;{task.deadlineDate ? task.deadlineDate.toLocaleDateString() : &quot;—&quot;}&lt;/span&gt;&#10;                        &lt;button className=&quot;icon-btn&quot; onClick={() =&gt; handleEdit('deadline')} title=&quot;Modifier la date limite&quot;&gt;&#10;                            &lt;span style={{fontSize: '1em', opacity: 0.7}}&gt;✏️&lt;/span&gt;&#10;                        &lt;/button&gt;&#10;                    &lt;/div&gt;&#10;                )}&#10;            &lt;/td&gt;&#10;            {/* Statut visuel avec badge coloré */}&#10;            &lt;td&gt;&#10;                &lt;div className=&quot;status-dropdown&quot;&gt;&#10;                    &lt;button&#10;                        className={`status-badge ${currentStatusConfig.class}`}&#10;                        onClick={() =&gt; setShowStatusDropdown(!showStatusDropdown)}&#10;                        onBlur={() =&gt; setTimeout(() =&gt; setShowStatusDropdown(false), 200)}&#10;                        title=&quot;Changer le statut&quot;&#10;                    &gt;&#10;                        &lt;span&gt;{currentStatusConfig.icon}&lt;/span&gt;&#10;                        &lt;span&gt;{currentStatusConfig.label}&lt;/span&gt;&#10;                        &lt;span style={{fontSize: '0.7em', opacity: 0.6}}&gt;▼&lt;/span&gt;&#10;                    &lt;/button&gt;&#10;                    {showStatusDropdown &amp;&amp; (&#10;                        &lt;div className=&quot;status-options&quot;&gt;&#10;                            {Object.values(StateType).map(status =&gt; {&#10;                                const config = getStatusConfig(status);&#10;                                return (&#10;                                    &lt;button&#10;                                        key={status}&#10;                                        className=&quot;status-option&quot;&#10;                                        onClick={() =&gt; handleStatusChange(status)}&#10;                                    &gt;&#10;                                        &lt;span&gt;{config.icon}&lt;/span&gt;&#10;                                        &lt;span&gt;{config.label}&lt;/span&gt;&#10;                                    &lt;/button&gt;&#10;                                );&#10;                            })}&#10;                        &lt;/div&gt;&#10;                    )}&#10;                &lt;/div&gt;&#10;            &lt;/td&gt;&#10;            {/* Actions minimalistes */}&#10;            &lt;td style={{textAlign: 'center', width: '32px'}}&gt;&#10;                &lt;button className=&quot;icon-btn delete&quot; onClick={handleClickDelete} title=&quot;Supprimer&quot;&gt;&#10;                    &lt;span style={{fontSize: '1em', opacity: 0.8}}&gt;️&lt;/span&gt;&#10;                &lt;/button&gt;&#10;            &lt;/td&gt;&#10;        &lt;/tr&gt;&#10;    );&#10;}" />
            </PendingDiffInfo>
          </value>
        </entry>
        <entry key="$PROJECT_DIR$/src/Web/index.css">
          <value>
            <PendingDiffInfo>
              <option name="filePath" value="$PROJECT_DIR$/src/Web/index.css" />
              <option name="originalContent" value="body {&#10;  font-family: 'Inter', 'Roboto', system-ui, sans-serif;&#10;  background: #f6f8fa;&#10;  color: #222;&#10;  margin: 0;&#10;  padding: 0;&#10;}&#10;&#10;h1, h2 {&#10;  font-weight: 600;&#10;  margin-bottom: 0.5em;&#10;}&#10;&#10;.table-container {&#10;  background: #fff;&#10;  border-radius: 12px;&#10;  box-shadow: 0 2px 8px rgba(0,0,0,0.04);&#10;  padding: 24px;&#10;  margin-top: 32px;&#10;}&#10;&#10;table {&#10;  width: 100%;&#10;  border-collapse: collapse;&#10;  background: transparent;&#10;}&#10;th, td {&#10;  padding: 10px 8px;&#10;  border-bottom: 1px solid #ececec;&#10;  font-size: 0.98rem;&#10;}&#10;th {&#10;  font-weight: 500;&#10;  color: #555;&#10;  background: #f6f8fa;&#10;}&#10;.task-row {&#10;  background: #fff;&#10;  transition: box-shadow 0.2s, background 0.2s;&#10;  border-radius: 8px;&#10;}&#10;.task-row:hover {&#10;  background: #f0f4fa;&#10;  box-shadow: 0 1px 4px rgba(0,0,0,0.03);&#10;}&#10;.icon-btn {&#10;  background: none;&#10;  border: none;&#10;  padding: 4px;&#10;  border-radius: 6px;&#10;  cursor: pointer;&#10;  transition: background 0.18s;&#10;  display: flex;&#10;  align-items: center;&#10;  justify-content: center;&#10;}&#10;.icon-btn:hover {&#10;  background: #e3eafc;&#10;}&#10;.icon-btn.delete {&#10;  color: #e53935;&#10;}&#10;.icon-btn.delete:hover {&#10;  background: #ffeaea;&#10;}&#10;.edit-input {&#10;  border: 1px solid #d0d7de;&#10;  border-radius: 6px;&#10;  padding: 6px 10px;&#10;  font-size: 0.97rem;&#10;  background: #f6f8fa;&#10;  transition: border 0.18s;&#10;}&#10;.edit-input:focus {&#10;  border-color: #1976d2;&#10;  outline: none;&#10;}&#10;input[type=&quot;date&quot;]::-webkit-calendar-picker-indicator {&#10;  filter: grayscale(1);&#10;}&#10;select.edit-input {&#10;  background: #f6f8fa;&#10;  border-radius: 6px;&#10;  border: 1px solid #d0d7de;&#10;  padding: 6px 10px;&#10;  font-size: 0.97rem;&#10;}&#10;/* Formulaire de création */&#10;.create-form {&#10;  display: flex;&#10;  gap: 16px;&#10;  align-items: center;&#10;  margin-bottom: 32px;&#10;}&#10;.create-form input,&#10;.create-form textarea {&#10;  min-width: 120px;&#10;  font-size: 0.97rem;&#10;  border-radius: 6px;&#10;  border: 1px solid #d0d7de;&#10;  padding: 6px 10px;&#10;  background: #f6f8fa;&#10;}&#10;.create-form button {&#10;  background: #1976d2;&#10;  color: #fff;&#10;  border: none;&#10;  border-radius: 6px;&#10;  padding: 7px 18px;&#10;  font-size: 1rem;&#10;  cursor: pointer;&#10;  transition: background 0.18s;&#10;}&#10;.create-form button:hover {&#10;  background: #1565c0;&#10;}&#10;&#10;" />
              <option name="updatedContent" value="body {&#10;  font-family: 'Inter', 'Roboto', system-ui, sans-serif;&#10;  background: #f6f8fa;&#10;  color: #222;&#10;  margin: 0;&#10;  padding: 0;&#10;  line-height: 1.6;&#10;}&#10;&#10;h1, h2 {&#10;  font-weight: 600;&#10;  margin-bottom: 0.5em;&#10;  color: #1a1a1a;&#10;}&#10;&#10;/* Conteneur du formulaire de création */&#10;.creation-forms {&#10;  background: #fff;&#10;  border-radius: 12px;&#10;  box-shadow: 0 2px 8px rgba(0,0,0,0.04);&#10;  padding: 24px;&#10;  margin-bottom: 24px;&#10;}&#10;&#10;.table-container {&#10;  background: #fff;&#10;  border-radius: 12px;&#10;  box-shadow: 0 2px 8px rgba(0,0,0,0.04);&#10;  padding: 24px;&#10;  margin-top: 32px;&#10;}&#10;&#10;table {&#10;  width: 100%;&#10;  border-collapse: collapse;&#10;  background: transparent;&#10;}&#10;th, td {&#10;  padding: 12px 8px;&#10;  border-bottom: 1px solid #ececec;&#10;  font-size: 0.98rem;&#10;}&#10;th {&#10;  font-weight: 500;&#10;  color: #555;&#10;  background: #f6f8fa;&#10;}&#10;.task-row {&#10;  background: #fff;&#10;  transition: box-shadow 0.2s, background 0.2s;&#10;}&#10;.task-row:hover {&#10;  background: #f0f4fa;&#10;  box-shadow: 0 1px 4px rgba(0,0,0,0.03);&#10;}&#10;.icon-btn {&#10;  background: none;&#10;  border: none;&#10;  padding: 6px;&#10;  border-radius: 6px;&#10;  cursor: pointer;&#10;  transition: background 0.18s;&#10;  display: inline-flex;&#10;  align-items: center;&#10;  justify-content: center;&#10;  min-width: 28px;&#10;  min-height: 28px;&#10;}&#10;.icon-btn:hover {&#10;  background: #e3eafc;&#10;}&#10;.icon-btn.delete {&#10;  color: #e53935;&#10;}&#10;.icon-btn.delete:hover {&#10;  background: #ffeaea;&#10;}&#10;.edit-input {&#10;  border: 1px solid #d0d7de;&#10;  border-radius: 8px;&#10;  padding: 8px 12px;&#10;  font-size: 0.97rem;&#10;  background: #fff;&#10;  transition: border 0.18s, box-shadow 0.18s;&#10;  font-family: inherit;&#10;}&#10;.edit-input:focus {&#10;  border-color: #1976d2;&#10;  outline: none;&#10;  box-shadow: 0 0 0 3px rgba(25, 118, 210, 0.1);&#10;}&#10;input[type=&quot;date&quot;]::-webkit-calendar-picker-indicator {&#10;  filter: grayscale(1);&#10;  cursor: pointer;&#10;}&#10;select.edit-input {&#10;  background: #fff;&#10;  border-radius: 8px;&#10;  border: 1px solid #d0d7de;&#10;  padding: 8px 12px;&#10;  font-size: 0.97rem;&#10;  cursor: pointer;&#10;}&#10;/* Formulaire de création moderne */&#10;.create-form {&#10;  display: flex;&#10;  gap: 12px;&#10;  align-items: stretch;&#10;  margin-top: 16px;&#10;  flex-wrap: wrap;&#10;}&#10;.create-form input,&#10;.create-form textarea {&#10;  flex: 1;&#10;  min-width: 140px;&#10;  font-size: 0.97rem;&#10;  border-radius: 8px;&#10;  border: 1px solid #d0d7de;&#10;  padding: 10px 14px;&#10;  background: #fff;&#10;  font-family: inherit;&#10;  transition: border 0.18s, box-shadow 0.18s;&#10;}&#10;.create-form input:focus,&#10;.create-form textarea:focus {&#10;  border-color: #1976d2;&#10;  outline: none;&#10;  box-shadow: 0 0 0 3px rgba(25, 118, 210, 0.1);&#10;}&#10;.create-form textarea {&#10;  resize: vertical;&#10;  min-height: 42px;&#10;  max-height: 100px;&#10;}&#10;.create-form input[type=&quot;date&quot;] {&#10;  flex: 0 0 160px;&#10;}&#10;.create-form button {&#10;  background: linear-gradient(135deg, #1976d2, #1565c0);&#10;  color: #fff;&#10;  border: none;&#10;  border-radius: 8px;&#10;  padding: 10px 20px;&#10;  font-size: 0.97rem;&#10;  font-weight: 500;&#10;  cursor: pointer;&#10;  transition: all 0.18s;&#10;  flex-shrink: 0;&#10;  font-family: inherit;&#10;}&#10;.create-form button:hover {&#10;  background: linear-gradient(135deg, #1565c0, #0d47a1);&#10;  box-shadow: 0 2px 8px rgba(25, 118, 210, 0.25);&#10;  transform: translateY(-1px);&#10;}&#10;.create-form button:active {&#10;  transform: translateY(0);&#10;}&#10;&#10;/* Badges de statut visuels */&#10;.status-badge {&#10;  display: inline-flex;&#10;  align-items: center;&#10;  gap: 6px;&#10;  padding: 6px 12px;&#10;  border-radius: 20px;&#10;  font-size: 0.85rem;&#10;  font-weight: 500;&#10;  border: none;&#10;  cursor: pointer;&#10;  transition: all 0.2s;&#10;  min-width: 100px;&#10;  justify-content: center;&#10;}&#10;&#10;.status-badge.todo {&#10;  background: #f0f4f8;&#10;  color: #4a5568;&#10;  border: 1px solid #cbd5e0;&#10;}&#10;&#10;.status-badge.todo:hover {&#10;  background: #e2e8f0;&#10;  border-color: #a0aec0;&#10;}&#10;&#10;.status-badge.in-progress {&#10;  background: #fef5e7;&#10;  color: #d69e2e;&#10;  border: 1px solid #f6e05e;&#10;}&#10;&#10;.status-badge.in-progress:hover {&#10;  background: #fed7aa;&#10;  border-color: #ed8936;&#10;}&#10;&#10;.status-badge.done {&#10;  background: #f0fff4;&#10;  color: #38a169;&#10;  border: 1px solid #9ae6b4;&#10;}&#10;&#10;.status-badge.done:hover {&#10;  background: #c6f6d5;&#10;  border-color: #68d391;&#10;}&#10;&#10;.status-badge.archived {&#10;  background: #f7fafc;&#10;  color: #718096;&#10;  border: 1px solid #cbd5e0;&#10;}&#10;&#10;.status-badge.archived:hover {&#10;  background: #edf2f7;&#10;  border-color: #a0aec0;&#10;}&#10;&#10;.status-dropdown {&#10;  position: relative;&#10;  display: inline-block;&#10;}&#10;&#10;.status-options {&#10;  position: absolute;&#10;  top: 100%;&#10;  left: 0;&#10;  right: 0;&#10;  background: white;&#10;  border: 1px solid #e2e8f0;&#10;  border-radius: 8px;&#10;  box-shadow: 0 4px 12px rgba(0,0,0,0.1);&#10;  z-index: 100;&#10;  margin-top: 4px;&#10;  overflow: hidden;&#10;}&#10;&#10;.status-option {&#10;  display: flex;&#10;  align-items: center;&#10;  gap: 8px;&#10;  padding: 10px 12px;&#10;  cursor: pointer;&#10;  transition: background 0.15s;&#10;  border: none;&#10;  width: 100%;&#10;  text-align: left;&#10;  font-size: 0.9rem;&#10;}&#10;&#10;.status-option:hover {&#10;  background: #f7fafc;&#10;}&#10;&#10;/* Responsive design */&#10;@media (max-width: 768px) {&#10;  .create-form {&#10;    flex-direction: column;&#10;    gap: 8px;&#10;  }&#10;  .create-form input,&#10;  .create-form textarea,&#10;  .create-form button {&#10;    width: 100%;&#10;  }&#10;}" />
            </PendingDiffInfo>
          </value>
        </entry>
      </map>
    </option>
  </component>
</project>