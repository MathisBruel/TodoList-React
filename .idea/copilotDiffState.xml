<?xml version="1.0" encoding="UTF-8"?>
<project version="4">
  <component name="CopilotDiffPersistence">
    <option name="pendingDiffs">
      <map>
        <entry key="$PROJECT_DIR$/src/Web/components/ShowTodos.tsx">
          <value>
            <PendingDiffInfo>
              <option name="filePath" value="$PROJECT_DIR$/src/Web/components/ShowTodos.tsx" />
              <option name="originalContent" value="import React from &quot;react&quot;;&#10;import {TaskComponent} from &quot;./TaskComponent&quot;;&#10;import {Task} from &quot;../../Domain/Task&quot;;&#10;&#10;export function ShowTodos({tasks, onDelete, onUpdate}: {&#10;    tasks: Task[],&#10;    onDelete: (title: string) =&gt; void,&#10;    onUpdate: () =&gt; void&#10;}) {&#10;    return (&#10;        &lt;div className=&quot;table-container&quot;&gt;&#10;            &lt;h2 style={{marginBottom: '18px'}}&gt;Liste des Todos&lt;/h2&gt;&#10;            &lt;table&gt;&#10;                &lt;thead&gt;&#10;                &lt;tr&gt;&#10;                    &lt;th&gt;Titre&lt;/th&gt;&#10;                    &lt;th&gt;Description&lt;/th&gt;&#10;                    &lt;th&gt;Date limite&lt;/th&gt;&#10;                    &lt;th&gt;Status&lt;/th&gt;&#10;                    &lt;th&gt;Actions&lt;/th&gt;&#10;                &lt;/tr&gt;&#10;                &lt;/thead&gt;&#10;                &lt;tbody&gt;&#10;                {tasks.map(task =&gt; (&#10;                    &lt;TaskComponent key={task.uuid} task={task} onDelete={onDelete} onUpdate={onUpdate}/&gt;&#10;                ))}&#10;                &lt;/tbody&gt;&#10;            &lt;/table&gt;&#10;        &lt;/div&gt;&#10;    )&#10;}" />
              <option name="updatedContent" value="import React from &quot;react&quot;;&#10;import {TaskComponent} from &quot;./TaskComponent&quot;;&#10;import {Task} from &quot;../../Domain/Task&quot;;&#10;&#10;export function ShowTodos({tasks, onDelete, onUpdate}: {&#10;    tasks: Task[],&#10;    onDelete: (title: string) =&gt; void,&#10;    onUpdate: () =&gt; void&#10;}) {&#10;    return (&#10;        &lt;div className=&quot;table-container&quot;&gt;&#10;            &lt;h2 style={{marginBottom: '18px'}}&gt;Liste des Todos&lt;/h2&gt;&#10;            &lt;table&gt;&#10;                &lt;thead&gt;&#10;                &lt;tr&gt;&#10;                    &lt;th&gt;Titre&lt;/th&gt;&#10;                    &lt;th&gt;Description&lt;/th&gt;&#10;                    &lt;th&gt;Date limite&lt;/th&gt;&#10;                    &lt;th&gt;Status&lt;/th&gt;&#10;                    &lt;th&gt;Dernière mise à jour&lt;/th&gt;&#10;                    &lt;th&gt;Actions&lt;/th&gt;&#10;                &lt;/tr&gt;&#10;                &lt;/thead&gt;&#10;                &lt;tbody&gt;&#10;                {tasks.map(task =&gt; (&#10;                    &lt;TaskComponent key={task.uuid} task={task} onDelete={onDelete} onUpdate={onUpdate}/&gt;&#10;                ))}&#10;                &lt;/tbody&gt;&#10;            &lt;/table&gt;&#10;        &lt;/div&gt;&#10;    )&#10;}" />
            </PendingDiffInfo>
          </value>
        </entry>
        <entry key="$PROJECT_DIR$/src/Web/components/TaskComponent.tsx">
          <value>
            <PendingDiffInfo>
              <option name="filePath" value="$PROJECT_DIR$/src/Web/components/TaskComponent.tsx" />
              <option name="originalContent" value="import {Task} from &quot;../../Domain/Task&quot;;&#10;import {StateType, StateConfig} from &quot;../../Domain/StateType&quot;;&#10;import React, {useState} from &quot;react&quot;;&#10;import {editDeadlineDate, editDescription, editTitle, editStatus} from &quot;../../App/EditTask&quot;;&#10;import {getTask} from &quot;../../Domain/Tasks&quot;;&#10;import {isTitleValid, isDescriptionValid} from &quot;../../Domain/Task&quot;;&#10;&#10;export function TaskComponent({task, onDelete, onUpdate}: {&#10;    task: Task,&#10;    onDelete: (title: string) =&gt; void,&#10;    onUpdate: () =&gt; void&#10;}) {&#10;    const [localState, setLocalState] = useState&lt;StateType&gt;(task.state);&#10;    const [editField, setEditField] = useState&lt;null | 'title' | 'description' | 'deadline'&gt;(null);&#10;    const [editValue, setEditValue] = useState&lt;string&gt;(&quot;&quot;);&#10;    const [showStatusDropdown, setShowStatusDropdown] = useState(false);&#10;&#10;    function handleClickDelete(e: React.MouseEvent&lt;HTMLButtonElement&gt;) {&#10;        e.preventDefault();&#10;        onDelete(task.title);&#10;    }&#10;&#10;    function handleEdit(field: 'title' | 'description' | 'deadline') {&#10;        setEditField(field);&#10;        if (field === 'deadline') {&#10;            setEditValue(task.deadlineDate ? task.deadlineDate.toISOString().slice(0, 10) : &quot;&quot;);&#10;        } else {&#10;            setEditValue((task as any)[field] ?? &quot;&quot;);&#10;        }&#10;    }&#10;&#10;    function handleSave(title: string, field: 'title' | 'description' | 'deadline') {&#10;        // À compléter par la logique métier&#10;        const editedTask: Task | undefined = getTask(title)&#10;        if (!editedTask) {&#10;            alert('Erreur de sauvegarde : impossible de trouver la tâche à modifier');&#10;            return;&#10;        }&#10;        &#10;        let result: Task | undefined;&#10;        let errorMessage = '';&#10;&#10;        if (field === 'title') {&#10;            if (!isTitleValid(editValue)) {&#10;                errorMessage = `Le titre doit contenir au moins 3 caractères (actuellement: ${editValue.trim().length})`;&#10;            } else {&#10;                result = editTitle(editedTask, editValue);&#10;            }&#10;        } else if (field === 'description') {&#10;            if (!isDescriptionValid(editValue)) {&#10;                errorMessage = `La description doit contenir au moins 3 caractères (actuellement: ${editValue?.trim().length || 0})`;&#10;            } else {&#10;                result = editDescription(editedTask, editValue);&#10;            }&#10;        } else if (field === 'deadline') {&#10;            result = editDeadlineDate(editedTask, editValue ? new Date(editValue) : undefined);&#10;        }&#10;&#10;        if (errorMessage) {&#10;            alert(`Erreur de sauvegarde : ${errorMessage}`);&#10;            return;&#10;        }&#10;&#10;        if (!result) {&#10;            alert('Erreur de sauvegarde : une erreur inattendue s\'est produite');&#10;            return;&#10;        }&#10;&#10;        // Réinitialiser l'état d'édition&#10;        setEditField(null);&#10;        setEditValue(&quot;&quot;);&#10;&#10;        // Actualiser le tableau&#10;        onUpdate();&#10;    }&#10;&#10;    function handleStatusChange(newStatus: StateType) {&#10;        const editedTask = getTask(task.title);&#10;        if (!editedTask) {&#10;            alert('Erreur de sauvegarde : impossible de trouver la tâche à modifier');&#10;            return;&#10;        }&#10;        &#10;        const result = editStatus(editedTask, newStatus);&#10;        if (!result) {&#10;            alert('Erreur de sauvegarde : impossible de changer le statut, vérifiez que la tâche est valide');&#10;            return;&#10;        }&#10;        &#10;        onUpdate();&#10;        setLocalState(newStatus);&#10;        setShowStatusDropdown(false);&#10;    }&#10;&#10;    const currentStatusConfig = StateConfig[localState];&#10;&#10;    return (&#10;        &lt;tr className=&quot;task-row&quot; key={task.uuid}&gt;&#10;            {/* Titre */}&#10;            &lt;td&gt;&#10;                {editField === 'title' ? (&#10;                    &lt;div style={{display: 'flex', alignItems: 'center', gap: '8px'}}&gt;&#10;                        &lt;input&#10;                            type=&quot;text&quot;&#10;                            value={editValue}&#10;                            onChange={e =&gt; setEditValue(e.target.value)}&#10;                            className=&quot;edit-input&quot;&#10;                            style={{width: '100%'}}&#10;                        /&gt;&#10;                        &lt;button className=&quot;icon-btn&quot; onClick={() =&gt; handleSave(task.title, 'title')}&#10;                                title=&quot;Sauvegarder&quot;&gt;&#10;                            &lt;span style={{fontSize: '1em'}}&gt;✔️&lt;/span&gt;&#10;                        &lt;/button&gt;&#10;                    &lt;/div&gt;&#10;                ) : (&#10;                    &lt;div style={{display: 'flex', alignItems: 'center', gap: '8px'}}&gt;&#10;                        &lt;span style={{flex: 1}}&gt;{task.title}&lt;/span&gt;&#10;                        &lt;button className=&quot;icon-btn&quot; onClick={() =&gt; handleEdit('title')} title=&quot;Modifier le titre&quot;&gt;&#10;                            &lt;span style={{fontSize: '1em', opacity: 0.7}}&gt;✏️&lt;/span&gt;&#10;                        &lt;/button&gt;&#10;                    &lt;/div&gt;&#10;                )}&#10;            &lt;/td&gt;&#10;            {/* Description */}&#10;            &lt;td&gt;&#10;                {editField === 'description' ? (&#10;                    &lt;div style={{display: 'flex', alignItems: 'center', gap: '8px'}}&gt;&#10;                        &lt;textarea&#10;                            value={editValue}&#10;                            onChange={e =&gt; setEditValue(e.target.value)}&#10;                            className=&quot;edit-input&quot;&#10;                            style={{resize: 'vertical', minHeight: '24px', width: '100%'}}&#10;                        /&gt;&#10;                        &lt;button className=&quot;icon-btn&quot; onClick={() =&gt; handleSave(task.title, 'description')}&#10;                                title=&quot;Sauvegarder&quot;&gt;&#10;                            &lt;span style={{fontSize: '1em'}}&gt;✔️&lt;/span&gt;&#10;                        &lt;/button&gt;&#10;                    &lt;/div&gt;&#10;                ) : (&#10;                    &lt;div style={{display: 'flex', alignItems: 'center', gap: '8px'}}&gt;&#10;                        &lt;span style={{flex: 1}}&gt;{task.description}&lt;/span&gt;&#10;                        &lt;button className=&quot;icon-btn&quot; onClick={() =&gt; handleEdit('description')}&#10;                                title=&quot;Modifier la description&quot;&gt;&#10;                            &lt;span style={{fontSize: '1em', opacity: 0.7}}&gt;✏️&lt;/span&gt;&#10;                        &lt;/button&gt;&#10;                    &lt;/div&gt;&#10;                )}&#10;            &lt;/td&gt;&#10;            {/* Deadline */}&#10;            &lt;td&gt;&#10;                {editField === 'deadline' ? (&#10;                    &lt;div style={{display: 'flex', alignItems: 'center', gap: '8px'}}&gt;&#10;                        &lt;input&#10;                            type=&quot;date&quot;&#10;                            value={editValue}&#10;                            onChange={e =&gt; setEditValue(e.target.value)}&#10;                            className=&quot;edit-input&quot;&#10;                            style={{width: '120px'}}&#10;                            min={new Date().toISOString().slice(0, 10)}&#10;                        /&gt;&#10;                        &lt;button className=&quot;icon-btn&quot; onClick={() =&gt; handleSave(task.title, 'deadline')}&#10;                                title=&quot;Sauvegarder&quot;&gt;&#10;                            &lt;span style={{fontSize: '1em'}}&gt;✔️&lt;/span&gt;&#10;                        &lt;/button&gt;&#10;                    &lt;/div&gt;&#10;                ) : (&#10;                    &lt;div style={{display: 'flex', alignItems: 'center', gap: '8px'}}&gt;&#10;                        &lt;span style={{flex: 1}}&gt;{task.deadlineDate ? task.deadlineDate.toLocaleDateString('fr-FR', {&#10;                            day: 'numeric',&#10;                            month: 'long',&#10;                            year: 'numeric'&#10;                        }) : &quot;—&quot;}&lt;/span&gt;&#10;                        &lt;button className=&quot;icon-btn&quot; onClick={() =&gt; handleEdit('deadline')}&#10;                                title=&quot;Modifier la date limite&quot;&gt;&#10;                            &lt;span style={{fontSize: '1em', opacity: 0.7}}&gt;✏️&lt;/span&gt;&#10;                        &lt;/button&gt;&#10;                    &lt;/div&gt;&#10;                )}&#10;            &lt;/td&gt;&#10;            {/* Statut visuel avec badge coloré */}&#10;            &lt;td&gt;&#10;                &lt;div className=&quot;status-dropdown&quot;&gt;&#10;                    &lt;button&#10;                        className={`status-badge ${currentStatusConfig.class}`}&#10;                        onClick={() =&gt; setShowStatusDropdown(!showStatusDropdown)}&#10;                        onBlur={() =&gt; setTimeout(() =&gt; setShowStatusDropdown(false), 200)}&#10;                        title=&quot;Changer le statut&quot;&#10;                    &gt;&#10;                        &lt;span&gt;{currentStatusConfig.icon}&lt;/span&gt;&#10;                        &lt;span&gt;{currentStatusConfig.label}&lt;/span&gt;&#10;                        &lt;span style={{fontSize: '0.7em', opacity: 0.6}}&gt;▼&lt;/span&gt;&#10;                    &lt;/button&gt;&#10;                    {showStatusDropdown &amp;&amp; (&#10;                        &lt;div className=&quot;status-options&quot;&gt;&#10;                            {Object.values(StateType).map(status =&gt; {&#10;                                const config = StateConfig[status];&#10;                                return (&#10;                                    &lt;button&#10;                                        key={status}&#10;                                        className=&quot;status-option&quot;&#10;                                        onClick={() =&gt; handleStatusChange(status)}&#10;                                    &gt;&#10;                                        &lt;span&gt;{config.icon}&lt;/span&gt;&#10;                                        &lt;span&gt;{config.label}&lt;/span&gt;&#10;                                    &lt;/button&gt;&#10;                                );&#10;                            })}&#10;                        &lt;/div&gt;&#10;                    )}&#10;                &lt;/div&gt;&#10;            &lt;/td&gt;&#10;            {/* Actions minimalistes */}&#10;            &lt;td style={{textAlign: 'center', width: '32px'}}&gt;&#10;                &lt;button className=&quot;icon-btn delete&quot; onClick={handleClickDelete} title=&quot;Supprimer&quot;&gt;&#10;                    &lt;span style={{fontSize: '1em', opacity: 0.8}}&gt;️&lt;/span&gt;&#10;                &lt;/button&gt;&#10;            &lt;/td&gt;&#10;        &lt;/tr&gt;&#10;    );&#10;}" />
              <option name="updatedContent" value="import {Task} from &quot;../../Domain/Task&quot;;&#10;import {StateType, StateConfig} from &quot;../../Domain/StateType&quot;;&#10;import React, {useState} from &quot;react&quot;;&#10;import {editDeadlineDate, editDescription, editTitle, editStatus} from &quot;../../App/EditTask&quot;;&#10;import {getTask} from &quot;../../Domain/Tasks&quot;;&#10;import {isTitleValid, isDescriptionValid} from &quot;../../Domain/Task&quot;;&#10;&#10;export function TaskComponent({task, onDelete, onUpdate}: {&#10;    task: Task,&#10;    onDelete: (title: string) =&gt; void,&#10;    onUpdate: () =&gt; void&#10;}) {&#10;    const [localState, setLocalState] = useState&lt;StateType&gt;(task.state);&#10;    const [editField, setEditField] = useState&lt;null | 'title' | 'description' | 'deadline'&gt;(null);&#10;    const [editValue, setEditValue] = useState&lt;string&gt;(&quot;&quot;);&#10;    const [showStatusDropdown, setShowStatusDropdown] = useState(false);&#10;&#10;    function handleClickDelete(e: React.MouseEvent&lt;HTMLButtonElement&gt;) {&#10;        e.preventDefault();&#10;        onDelete(task.title);&#10;    }&#10;&#10;    function handleEdit(field: 'title' | 'description' | 'deadline') {&#10;        setEditField(field);&#10;        if (field === 'deadline') {&#10;            setEditValue(task.deadlineDate ? task.deadlineDate.toISOString().slice(0, 10) : &quot;&quot;);&#10;        } else {&#10;            setEditValue((task as any)[field] ?? &quot;&quot;);&#10;        }&#10;    }&#10;&#10;    function handleSave(title: string, field: 'title' | 'description' | 'deadline') {&#10;        // À compléter par la logique métier&#10;        const editedTask: Task | undefined = getTask(title)&#10;        if (!editedTask) {&#10;            alert('Erreur de sauvegarde : impossible de trouver la tâche à modifier');&#10;            return;&#10;        }&#10;        &#10;        let result: Task | undefined;&#10;        let errorMessage = '';&#10;&#10;        if (field === 'title') {&#10;            if (!isTitleValid(editValue)) {&#10;                errorMessage = `Le titre doit contenir au moins 3 caractères (actuellement: ${editValue.trim().length})`;&#10;            } else {&#10;                result = editTitle(editedTask, editValue);&#10;            }&#10;        } else if (field === 'description') {&#10;            if (!isDescriptionValid(editValue)) {&#10;                errorMessage = `La description doit contenir au moins 3 caractères (actuellement: ${editValue?.trim().length || 0})`;&#10;            } else {&#10;                result = editDescription(editedTask, editValue);&#10;            }&#10;        } else if (field === 'deadline') {&#10;            result = editDeadlineDate(editedTask, editValue ? new Date(editValue) : undefined);&#10;        }&#10;&#10;        if (errorMessage) {&#10;            alert(`Erreur de sauvegarde : ${errorMessage}`);&#10;            return;&#10;        }&#10;&#10;        if (!result) {&#10;            alert('Erreur de sauvegarde : une erreur inattendue s\'est produite');&#10;            return;&#10;        }&#10;&#10;        // Réinitialiser l'état d'édition&#10;        setEditField(null);&#10;        setEditValue(&quot;&quot;);&#10;&#10;        // Actualiser le tableau&#10;        onUpdate();&#10;    }&#10;&#10;    function handleStatusChange(newStatus: StateType) {&#10;        const editedTask = getTask(task.title);&#10;        if (!editedTask) {&#10;            alert('Erreur de sauvegarde : impossible de trouver la tâche à modifier');&#10;            return;&#10;        }&#10;        &#10;        const result = editStatus(editedTask, newStatus);&#10;        if (!result) {&#10;            alert('Erreur de sauvegarde : impossible de changer le statut, vérifiez que la tâche est valide');&#10;            return;&#10;        }&#10;        &#10;        onUpdate();&#10;        setLocalState(newStatus);&#10;        setShowStatusDropdown(false);&#10;    }&#10;&#10;    const currentStatusConfig = StateConfig[localState];&#10;&#10;    return (&#10;        &lt;tr className=&quot;task-row&quot; key={task.uuid}&gt;&#10;            {/* Titre */}&#10;            &lt;td&gt;&#10;                {editField === 'title' ? (&#10;                    &lt;div style={{display: 'flex', alignItems: 'center', gap: '8px'}}&gt;&#10;                        &lt;input&#10;                            type=&quot;text&quot;&#10;                            value={editValue}&#10;                            onChange={e =&gt; setEditValue(e.target.value)}&#10;                            className=&quot;edit-input&quot;&#10;                            style={{width: '100%'}}&#10;                        /&gt;&#10;                        &lt;button className=&quot;icon-btn&quot; onClick={() =&gt; handleSave(task.title, 'title')}&#10;                                title=&quot;Sauvegarder&quot;&gt;&#10;                            &lt;span style={{fontSize: '1em'}}&gt;✔️&lt;/span&gt;&#10;                        &lt;/button&gt;&#10;                    &lt;/div&gt;&#10;                ) : (&#10;                    &lt;div style={{display: 'flex', alignItems: 'center', gap: '8px'}}&gt;&#10;                        &lt;span style={{flex: 1}}&gt;{task.title}&lt;/span&gt;&#10;                        &lt;button className=&quot;icon-btn&quot; onClick={() =&gt; handleEdit('title')} title=&quot;Modifier le titre&quot;&gt;&#10;                            &lt;span style={{fontSize: '1em', opacity: 0.7}}&gt;✏️&lt;/span&gt;&#10;                        &lt;/button&gt;&#10;                    &lt;/div&gt;&#10;                )}&#10;            &lt;/td&gt;&#10;            {/* Description */}&#10;            &lt;td&gt;&#10;                {editField === 'description' ? (&#10;                    &lt;div style={{display: 'flex', alignItems: 'center', gap: '8px'}}&gt;&#10;                        &lt;textarea&#10;                            value={editValue}&#10;                            onChange={e =&gt; setEditValue(e.target.value)}&#10;                            className=&quot;edit-input&quot;&#10;                            style={{resize: 'vertical', minHeight: '24px', width: '100%'}}&#10;                        /&gt;&#10;                        &lt;button className=&quot;icon-btn&quot; onClick={() =&gt; handleSave(task.title, 'description')}&#10;                                title=&quot;Sauvegarder&quot;&gt;&#10;                            &lt;span style={{fontSize: '1em'}}&gt;✔️&lt;/span&gt;&#10;                        &lt;/button&gt;&#10;                    &lt;/div&gt;&#10;                ) : (&#10;                    &lt;div style={{display: 'flex', alignItems: 'center', gap: '8px'}}&gt;&#10;                        &lt;span style={{flex: 1}}&gt;{task.description}&lt;/span&gt;&#10;                        &lt;button className=&quot;icon-btn&quot; onClick={() =&gt; handleEdit('description')}&#10;                                title=&quot;Modifier la description&quot;&gt;&#10;                            &lt;span style={{fontSize: '1em', opacity: 0.7}}&gt;✏️&lt;/span&gt;&#10;                        &lt;/button&gt;&#10;                    &lt;/div&gt;&#10;                )}&#10;            &lt;/td&gt;&#10;            {/* Deadline */}&#10;            &lt;td&gt;&#10;                {editField === 'deadline' ? (&#10;                    &lt;div style={{display: 'flex', alignItems: 'center', gap: '8px'}}&gt;&#10;                        &lt;input&#10;                            type=&quot;date&quot;&#10;                            value={editValue}&#10;                            onChange={e =&gt; setEditValue(e.target.value)}&#10;                            className=&quot;edit-input&quot;&#10;                            style={{width: '120px'}}&#10;                            min={new Date().toISOString().slice(0, 10)}&#10;                        /&gt;&#10;                        &lt;button className=&quot;icon-btn&quot; onClick={() =&gt; handleSave(task.title, 'deadline')}&#10;                                title=&quot;Sauvegarder&quot;&gt;&#10;                            &lt;span style={{fontSize: '1em'}}&gt;✔️&lt;/span&gt;&#10;                        &lt;/button&gt;&#10;                    &lt;/div&gt;&#10;                ) : (&#10;                    &lt;div style={{display: 'flex', alignItems: 'center', gap: '8px'}}&gt;&#10;                        &lt;span style={{flex: 1}}&gt;{task.deadlineDate ? task.deadlineDate.toLocaleDateString('fr-FR', {&#10;                            day: 'numeric',&#10;                            month: 'long',&#10;                            year: 'numeric'&#10;                        }) : &quot;—&quot;}&lt;/span&gt;&#10;                        &lt;button className=&quot;icon-btn&quot; onClick={() =&gt; handleEdit('deadline')}&#10;                                title=&quot;Modifier la date limite&quot;&gt;&#10;                            &lt;span style={{fontSize: '1em', opacity: 0.7}}&gt;✏️&lt;/span&gt;&#10;                        &lt;/button&gt;&#10;                    &lt;/div&gt;&#10;                )}&#10;            &lt;/td&gt;&#10;            {/* Statut visuel avec badge coloré */}&#10;            &lt;td&gt;&#10;                &lt;div className=&quot;status-dropdown&quot;&gt;&#10;                    &lt;button&#10;                        className={`status-badge ${currentStatusConfig.class}`}&#10;                        onClick={() =&gt; setShowStatusDropdown(!showStatusDropdown)}&#10;                        onBlur={() =&gt; setTimeout(() =&gt; setShowStatusDropdown(false), 200)}&#10;                        title=&quot;Changer le statut&quot;&#10;                    &gt;&#10;                        &lt;span&gt;{currentStatusConfig.icon}&lt;/span&gt;&#10;                        &lt;span&gt;{currentStatusConfig.label}&lt;/span&gt;&#10;                        &lt;span style={{fontSize: '0.7em', opacity: 0.6}}&gt;▼&lt;/span&gt;&#10;                    &lt;/button&gt;&#10;                    {showStatusDropdown &amp;&amp; (&#10;                        &lt;div className=&quot;status-options&quot;&gt;&#10;                            {Object.values(StateType).map(status =&gt; {&#10;                                const config = StateConfig[status];&#10;                                return (&#10;                                    &lt;button&#10;                                        key={status}&#10;                                        className=&quot;status-option&quot;&#10;                                        onClick={() =&gt; handleStatusChange(status)}&#10;                                    &gt;&#10;                                        &lt;span&gt;{config.icon}&lt;/span&gt;&#10;                                        &lt;span&gt;{config.label}&lt;/span&gt;&#10;                                    &lt;/button&gt;&#10;                                );&#10;                            })}&#10;                        &lt;/div&gt;&#10;                    )}&#10;                &lt;/div&gt;&#10;            &lt;/td&gt;&#10;            {/* Dernière mise à jour */}&#10;            &lt;td style={{fontSize: '0.9em', color: '#666'}}&gt;&#10;                &lt;div style={{display: 'flex', flexDirection: 'column', gap: '2px'}}&gt;&#10;                    &lt;span&gt;{task.updatedAt.toLocaleDateString('fr-FR', {&#10;                        day: '2-digit',&#10;                        month: '2-digit',&#10;                        year: 'numeric'&#10;                    })}&lt;/span&gt;&#10;                    &lt;span style={{fontSize: '0.85em', opacity: 0.8}}&gt;&#10;                        {task.updatedAt.toLocaleTimeString('fr-FR', {&#10;                            hour: '2-digit',&#10;                            minute: '2-digit'&#10;                        })}&#10;                    &lt;/span&gt;&#10;                &lt;/div&gt;&#10;            &lt;/td&gt;&#10;            {/* Actions minimalistes */}&#10;            &lt;td style={{textAlign: 'center', width: '32px'}}&gt;&#10;                &lt;button className=&quot;icon-btn delete&quot; onClick={handleClickDelete} title=&quot;Supprimer&quot;&gt;&#10;                    &lt;span style={{fontSize: '1em', opacity: 0.8}}&gt;️&lt;/span&gt;&#10;                &lt;/button&gt;&#10;            &lt;/td&gt;&#10;        &lt;/tr&gt;&#10;    );&#10;}" />
            </PendingDiffInfo>
          </value>
        </entry>
        <entry key="$PROJECT_DIR$/src/Web/components/TaskComponent_new.tsx">
          <value>
            <PendingDiffInfo>
              <option name="filePath" value="$PROJECT_DIR$/src/Web/components/TaskComponent_new.tsx" />
              <option name="updatedContent" value="import {Task} from &quot;../../Domain/Task&quot;;&#10;import {StateType, StateConfig} from &quot;../../Domain/StateType&quot;;&#10;import React, {useState} from &quot;react&quot;;&#10;import {editDeadlineDate, editDescription, editTitle, editStatus} from &quot;../../App/EditTask&quot;;&#10;import {getTask} from &quot;../../Domain/Tasks&quot;;&#10;import {isTitleValid, isDescriptionValid} from &quot;../../Domain/Task&quot;;&#10;&#10;export function TaskComponent({task, onDelete, onUpdate}: {&#10;    task: Task,&#10;    onDelete: (title: string) =&gt; void,&#10;    onUpdate: () =&gt; void&#10;}) {&#10;    const [localState, setLocalState] = useState&lt;StateType&gt;(task.state);&#10;    const [editField, setEditField] = useState&lt;null | 'title' | 'description' | 'deadline'&gt;(null);&#10;    const [editValue, setEditValue] = useState&lt;string&gt;(&quot;&quot;);&#10;    const [showStatusDropdown, setShowStatusDropdown] = useState(false);&#10;&#10;    function handleClickDelete(e: React.MouseEvent&lt;HTMLButtonElement&gt;) {&#10;        e.preventDefault();&#10;        onDelete(task.title);&#10;    }&#10;&#10;    function handleEdit(field: 'title' | 'description' | 'deadline') {&#10;        setEditField(field);&#10;        if (field === 'deadline') {&#10;            setEditValue(task.deadlineDate ? task.deadlineDate.toISOString().slice(0, 10) : &quot;&quot;);&#10;        } else {&#10;            setEditValue((task as any)[field] ?? &quot;&quot;);&#10;        }&#10;    }&#10;&#10;    function handleSave(title: string, field: 'title' | 'description' | 'deadline') {&#10;        const editedTask: Task | undefined = getTask(title)&#10;        if (!editedTask) {&#10;            alert('Erreur de sauvegarde : impossible de trouver la tâche à modifier');&#10;            return;&#10;        }&#10;        &#10;        let result: Task | undefined;&#10;        let errorMessage = '';&#10;&#10;        if (field === 'title') {&#10;            if (!isTitleValid(editValue)) {&#10;                errorMessage = `Le titre doit contenir au moins 3 caractères (actuellement: ${editValue.trim().length})`;&#10;            } else {&#10;                result = editTitle(editedTask, editValue);&#10;            }&#10;        } else if (field === 'description') {&#10;            if (!isDescriptionValid(editValue)) {&#10;                errorMessage = `La description doit contenir au moins 3 caractères (actuellement: ${editValue?.trim().length || 0})`;&#10;            } else {&#10;                result = editDescription(editedTask, editValue);&#10;            }&#10;        } else if (field === 'deadline') {&#10;            result = editDeadlineDate(editedTask, editValue ? new Date(editValue) : undefined);&#10;        }&#10;&#10;        if (errorMessage) {&#10;            alert(`Erreur de sauvegarde : ${errorMessage}`);&#10;            return;&#10;        }&#10;&#10;        if (!result) {&#10;            alert('Erreur de sauvegarde : une erreur inattendue s\'est produite');&#10;            return;&#10;        }&#10;&#10;        setEditField(null);&#10;        setEditValue(&quot;&quot;);&#10;        onUpdate();&#10;    }&#10;&#10;    function handleStatusChange(newStatus: StateType) {&#10;        const editedTask = getTask(task.title);&#10;        if (!editedTask) {&#10;            alert('Erreur de sauvegarde : impossible de trouver la tâche à modifier');&#10;            return;&#10;        }&#10;        &#10;        const result = editStatus(editedTask, newStatus);&#10;        if (!result) {&#10;            alert('Erreur de sauvegarde : impossible de changer le statut, vérifiez que la tâche est valide');&#10;            return;&#10;        }&#10;        &#10;        onUpdate();&#10;        setLocalState(newStatus);&#10;        setShowStatusDropdown(false);&#10;    }&#10;&#10;    const currentStatusConfig = StateConfig[localState];&#10;&#10;    return (&#10;        &lt;tr className=&quot;task-row&quot; key={task.uuid}&gt;&#10;            &lt;td&gt;&#10;                {editField === 'title' ? (&#10;                    &lt;div style={{display: 'flex', alignItems: 'center', gap: '8px'}}&gt;&#10;                        &lt;input&#10;                            type=&quot;text&quot;&#10;                            value={editValue}&#10;                            onChange={e =&gt; setEditValue(e.target.value)}&#10;                            className=&quot;edit-input&quot;&#10;                            style={{width: '100%'}}&#10;                        /&gt;&#10;                        &lt;button className=&quot;icon-btn&quot; onClick={() =&gt; handleSave(task.title, 'title')}&#10;                                title=&quot;Sauvegarder&quot;&gt;&#10;                            &lt;span style={{fontSize: '1em'}}&gt;✔️&lt;/span&gt;&#10;                        &lt;/button&gt;&#10;                    &lt;/div&gt;&#10;                ) : (&#10;                    &lt;div style={{display: 'flex', alignItems: 'center', gap: '8px'}}&gt;&#10;                        &lt;span style={{flex: 1}}&gt;{task.title}&lt;/span&gt;&#10;                        &lt;button className=&quot;icon-btn&quot; onClick={() =&gt; handleEdit('title')} title=&quot;Modifier le titre&quot;&gt;&#10;                            &lt;span style={{fontSize: '1em', opacity: 0.7}}&gt;✏️&lt;/span&gt;&#10;                        &lt;/button&gt;&#10;                    &lt;/div&gt;&#10;                )}&#10;            &lt;/td&gt;&#10;            &lt;td&gt;&#10;                {editField === 'description' ? (&#10;                    &lt;div style={{display: 'flex', alignItems: 'center', gap: '8px'}}&gt;&#10;                        &lt;textarea&#10;                            value={editValue}&#10;                            onChange={e =&gt; setEditValue(e.target.value)}&#10;                            className=&quot;edit-input&quot;&#10;                            style={{resize: 'vertical', minHeight: '24px', width: '100%'}}&#10;                        /&gt;&#10;                        &lt;button className=&quot;icon-btn&quot; onClick={() =&gt; handleSave(task.title, 'description')}&#10;                                title=&quot;Sauvegarder&quot;&gt;&#10;                            &lt;span style={{fontSize: '1em'}}&gt;✔️&lt;/span&gt;&#10;                        &lt;/button&gt;&#10;                    &lt;/div&gt;&#10;                ) : (&#10;                    &lt;div style={{display: 'flex', alignItems: 'center', gap: '8px'}}&gt;&#10;                        &lt;span style={{flex: 1}}&gt;{task.description}&lt;/span&gt;&#10;                        &lt;button className=&quot;icon-btn&quot; onClick={() =&gt; handleEdit('description')}&#10;                                title=&quot;Modifier la description&quot;&gt;&#10;                            &lt;span style={{fontSize: '1em', opacity: 0.7}}&gt;✏️&lt;/span&gt;&#10;                        &lt;/button&gt;&#10;                    &lt;/div&gt;&#10;                )}&#10;            &lt;/td&gt;&#10;            &lt;td&gt;&#10;                {editField === 'deadline' ? (&#10;                    &lt;div style={{display: 'flex', alignItems: 'center', gap: '8px'}}&gt;&#10;                        &lt;input&#10;                            type=&quot;date&quot;&#10;                            value={editValue}&#10;                            onChange={e =&gt; setEditValue(e.target.value)}&#10;                            className=&quot;edit-input&quot;&#10;                            style={{width: '120px'}}&#10;                            min={new Date().toISOString().slice(0, 10)}&#10;                        /&gt;&#10;                        &lt;button className=&quot;icon-btn&quot; onClick={() =&gt; handleSave(task.title, 'deadline')}&#10;                                title=&quot;Sauvegarder&quot;&gt;&#10;                            &lt;span style={{fontSize: '1em'}}&gt;✔️&lt;/span&gt;&#10;                        &lt;/button&gt;&#10;                    &lt;/div&gt;&#10;                ) : (&#10;                    &lt;div style={{display: 'flex', alignItems: 'center', gap: '8px'}}&gt;&#10;                        &lt;span style={{flex: 1}}&gt;{task.deadlineDate ? task.deadlineDate.toLocaleDateString('fr-FR', {&#10;                            day: 'numeric',&#10;                            month: 'long',&#10;                            year: 'numeric'&#10;                        }) : &quot;—&quot;}&lt;/span&gt;&#10;                        &lt;button className=&quot;icon-btn&quot; onClick={() =&gt; handleEdit('deadline')}&#10;                                title=&quot;Modifier la date limite&quot;&gt;&#10;                            &lt;span style={{fontSize: '1em', opacity: 0.7}}&gt;✏️&lt;/span&gt;&#10;                        &lt;/button&gt;&#10;                    &lt;/div&gt;&#10;                )}&#10;            &lt;/td&gt;&#10;            &lt;td&gt;&#10;                &lt;div className=&quot;status-dropdown&quot;&gt;&#10;                    &lt;button&#10;                        className={`status-badge ${currentStatusConfig.class}`}&#10;                        onClick={() =&gt; setShowStatusDropdown(!showStatusDropdown)}&#10;                        onBlur={() =&gt; setTimeout(() =&gt; setShowStatusDropdown(false), 200)}&#10;                        title=&quot;Changer le statut&quot;&#10;                    &gt;&#10;                        &lt;span&gt;{currentStatusConfig.icon}&lt;/span&gt;&#10;                        &lt;span&gt;{currentStatusConfig.label}&lt;/span&gt;&#10;                        &lt;span style={{fontSize: '0.7em', opacity: 0.6}}&gt;▼&lt;/span&gt;&#10;                    &lt;/button&gt;&#10;                    {showStatusDropdown &amp;&amp; (&#10;                        &lt;div className=&quot;status-options&quot;&gt;&#10;                            {Object.values(StateType).map(status =&gt; {&#10;                                const config = StateConfig[status];&#10;                                return (&#10;                                    &lt;button&#10;                                        key={status}&#10;                                        className=&quot;status-option&quot;&#10;                                        onClick={() =&gt; handleStatusChange(status)}&#10;                                    &gt;&#10;                                        &lt;span&gt;{config.icon}&lt;/span&gt;&#10;                                        &lt;span&gt;{config.label}&lt;/span&gt;&#10;                                    &lt;/button&gt;&#10;                                );&#10;                            })}&#10;                        &lt;/div&gt;&#10;                    )}&#10;                &lt;/div&gt;&#10;            &lt;/td&gt;&#10;            &lt;td style={{fontSize: '0.9em', color: '#666'}}&gt;&#10;                &lt;div style={{display: 'flex', flexDirection: 'column', gap: '2px'}}&gt;&#10;                    &lt;span&gt;{task.updatedAt.toLocaleDateString('fr-FR', {&#10;                        day: '2-digit',&#10;                        month: '2-digit',&#10;                        year: 'numeric'&#10;                    })}&lt;/span&gt;&#10;                    &lt;span style={{fontSize: '0.85em', opacity: 0.8}}&gt;&#10;                        {task.updatedAt.toLocaleTimeString('fr-FR', {&#10;                            hour: '2-digit',&#10;                            minute: '2-digit'&#10;                        })}&#10;                    &lt;/span&gt;&#10;                &lt;/div&gt;&#10;            &lt;/td&gt;&#10;            &lt;td style={{textAlign: 'center', width: '32px'}}&gt;&#10;                &lt;button className=&quot;icon-btn delete&quot; onClick={handleClickDelete} title=&quot;Supprimer&quot;&gt;&#10;                    &lt;span style={{fontSize: '1em', opacity: 0.8}}&gt;️&lt;/span&gt;&#10;                &lt;/button&gt;&#10;            &lt;/td&gt;&#10;        &lt;/tr&gt;&#10;    );&#10;}" />
            </PendingDiffInfo>
          </value>
        </entry>
      </map>
    </option>
  </component>
</project>